{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CASF-2013x2016 testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "### basic imports ###\n",
    "import os\n",
    "import _pickle as pickle\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.preprocessing import StandardScaler,Normalizer\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "### some useful function ###\n",
    "\n",
    "def getImportance(model, feature_list, top_n=20):\n",
    "    importances = list(model.feature_importances_)\n",
    "    feature_importances = [(feature, round(importance, 4)) for feature, importance in zip(feature_list, importances)]\n",
    "    feature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n",
    "    [print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances[:top_n]]\n",
    "    return ['Variable: {:20} Importance: {}'.format(*pair) for pair in feature_importances[:top_n]]\n",
    "\n",
    "def getPerformance(predictions, test_labels):\n",
    "    correlation = np.corrcoef(predictions, test_labels)\n",
    "    errors = abs(predictions -test_labels)\n",
    "    mae = round(np.mean(errors),2)\n",
    "    mape = 100*(errors/test_labels)\n",
    "    accuracy = 100 - np.mean(mape)\n",
    "    rmse = round(np.sqrt(np.mean(np.square(predictions -test_labels))),3)\n",
    "    perfs = {'correlation':correlation,'errors':errors, 'mae':mae, 'mape':mape, 'rmse': rmse,'accuracy':accuracy}\n",
    "\n",
    "    return perfs\n",
    "\n",
    "def printPerformance(prd, casf2016PKD,mlType=''):\n",
    "    casf2016corrcoefficient = round(np.corrcoef(prd, casf2016PKD)[1][0],3)\n",
    "    casf2016perfs = getPerformance(prd, casf2016PKD)\n",
    "    if mlType:\n",
    "        print(f\"{mlType} performance:\")\n",
    "        \n",
    "    print(f\"Correlation Coefficient: R={casf2016corrcoefficient}\")\n",
    "    print(f\"Accuracy: {round(casf2016perfs['accuracy'],3)}\")\n",
    "    print(f\"Mean absolute error: {round(casf2016perfs['mae'],3)}\")\n",
    "    print(f\"Standard error of the errors: {round(np.std(casf2016perfs['errors']),3)}\")\n",
    "    print(f\"RMSE: {round(casf2016perfs['rmse'],3)}\\n\")\n",
    "\n",
    "def readCasfIndex(indexPath):\n",
    "    proteinList = []\n",
    "    with open(indexPath, 'r') as fi:\n",
    "        lines = fi.readlines()\n",
    "        for line in lines:\n",
    "            if line.startswith('#')==False:\n",
    "                proteinList.append(line.split()[0])\n",
    "    return proteinList\n",
    "\n",
    "# automatize training and testing of 4 different model: \n",
    "# Random Forest, SVM, linear regression, KNN\n",
    "\n",
    "def batchMlExecution(X_train, y_train, X_test, y_test):\n",
    "    from sklearn import neighbors\n",
    "    from sklearn.svm import SVR\n",
    "    from sklearn.linear_model import LinearRegression\n",
    "    \n",
    "    scaler = StandardScaler().fit(X_train)\n",
    "    standardizedFeatures = scaler.transform(X_train)\n",
    "    standardizedTest = scaler.transform(X_test)\n",
    "\n",
    "    svr =  SVR()\n",
    "    rf = RandomForestRegressor(n_estimators=100,n_jobs=10)\n",
    "    lr = LinearRegression(normalize=True)\n",
    "    knn = neighbors.KNeighborsRegressor(n_neighbors=10)\n",
    "    \n",
    "    svr.fit(standardizedFeatures, y_train)\n",
    "    rf.fit(X_train, y_train)\n",
    "    lr.fit(X_train, y_train)\n",
    "    knn.fit(X_train, y_train)\n",
    "    \n",
    "    svrPred = svr.predict(standardizedTest)\n",
    "    rfPred = rf.predict(X_test)\n",
    "    lrPred = lr.predict(X_test)\n",
    "    knnPred = knn.predict(X_test)\n",
    "    \n",
    "    svrPerf = getPerformance(svrPred, y_test)\n",
    "    rfPerf = getPerformance(rfPred, y_test)\n",
    "    lrPerf = getPerformance(lrPred, y_test)\n",
    "    knnPerf = getPerformance(knnPred, y_test)\n",
    "    \n",
    "    return svrPerf, rfPerf, lrPerf, knnPerf\n",
    "\n",
    "def plotCorr(prediction, y_test):\n",
    "    matplotlib.style.use('seaborn-ticks')\n",
    "    #vina R= 604\n",
    "    slope, intercept = np.polyfit(prediction, y_test, 1)\n",
    "    abline_values = [slope * i + intercept for i in prediction]\n",
    "    plt.scatter(prediction, y_test, s=40, edgecolors='black')\n",
    "    plt.plot(prediction, abline_values, 'r',linewidth=5)\n",
    "    plt.gcf().set_size_inches((10,10))\n",
    "    plt.xticks(range(0,16,3), fontsize=22)\n",
    "    plt.yticks(range(0,16,3), fontsize=22)\n",
    "    plt.xlabel('Predicted pKd')\n",
    "    plt.ylabel('Experimental pKd')\n",
    "    plt.show()\n",
    "\n",
    "def preparingTrainingSet(inputFeatures, affinityLables, testSetPDBlist, mask=False):\n",
    "    \"\"\"\n",
    "    arguments:\n",
    "        inputFeatures: pandas DataFrame\n",
    "            input dataframe of features\n",
    "        affinityLabels: Dict\n",
    "            dictionary referring to the experimental binding affinity of each ligand\n",
    "        tesSetPDBlist: list\n",
    "            list of pdb belonging to the test set, for filtering reasons\n",
    "        mask: list\n",
    "            additional pdb to remove\n",
    "        \n",
    "    \"\"\"\n",
    "    if mask:\n",
    "        X_train = inputFeatures[inputFeatures['pdb'].isin(mask)]\n",
    "    else:\n",
    "        X_train = inputFeatures\n",
    "    X_train = X_train[~X_train['pdb'].isin(testSetPDBlist)]\n",
    "    X_train = X_train.fillna(0)\n",
    "    \n",
    "    print(f\"Number of samples in training set {len(X_train)}\")\n",
    "    \n",
    "    #saving labels\n",
    "    y_train = [affinityLabels[x] for x in X_train['pdb']]\n",
    "    \n",
    "    X_train = X_train.drop('pdb', axis = 1)\n",
    "    X_train = X_train.drop('Affinity', axis = 1)\n",
    "\n",
    "    \n",
    "    for feat in X_train.columns:\n",
    "        if X_train[feat].std() == 0.0:\n",
    "            X_train.drop(feat, axis = 1, inplace=True)\n",
    "\n",
    "    X_train = X_train.reindex(sorted(X_train.columns), axis=1)\n",
    "    return X_train,y_train\n",
    "\n",
    "def preparingTestSet(X_train, testSet):\n",
    "    X_test = testSet\n",
    "    y_test = [affinityLabels[x] for x in testSet['pdb']]\n",
    "        \n",
    "    X_test = X_test.fillna(0)\n",
    "    X_test = X_test.drop('pdb', axis = 1)\n",
    "    X_test = X_test.drop('Affinity', axis = 1)\n",
    "\n",
    "    for feat in X_test.columns:\n",
    "        if feat not in X_train.columns:\n",
    "            X_test.drop(feat, axis = 1, inplace = True)\n",
    "       \n",
    "    X_test = X_test.reindex(sorted(X_test.columns), axis=1)\n",
    "\n",
    "    print(f\"Number of sample in test set: {len(X_test)}\")\n",
    "    return X_test, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "373"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### import precalculated features ###\n",
    "import _pickle as pickle\n",
    "\n",
    "with open(\"/home/poltix/PDBBind/PDBBindAffinityAll.pickle\", 'rb') as fi:\n",
    "    affinityLabels = pickle.load(fi)\n",
    "\n",
    "# new dataset comprehend all the PDBBind2018\n",
    "with open('/home/poltix/Documents/pdbbind2018.pickle', 'rb') as fi:\n",
    "    pdbbind2018Features = pickle.load(fi)\n",
    "\n",
    "with open('/home/poltix/Documents/casf_2016_index.txt','r') as fi:\n",
    "    lines = fi.readlines()\n",
    "     \n",
    "casf2016dict = {line.split(' ')[1].lower():float(line.split(' ')[2]) for line in lines}\n",
    "casf2016 = list(casf2016dict)\n",
    "casf2013 = readCasfIndex('/home/poltix/CASF-2013-up/coreset/index/2013_core_data.lst')\n",
    "\n",
    "# merge all the complexes in a single non redundant set\n",
    "casfAll = []\n",
    "#casfAll.extend(casf2007)\n",
    "casfAll.extend(casf2013)\n",
    "casfAll.extend(casf2016)\n",
    "casfAll = list(set(casfAll))\n",
    "len(casfAll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pdbb2018Index = readCasfIndex('/home/poltix/PDBBind/index/INDEX_refined_data.2018')\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/pdbFiltered40.txt', 'r') as fi: identityMask40 = fi.read().splitlines()\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/pdbFiltered50.txt', 'r') as fi: identityMask50 = fi.read().splitlines()\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/pdbFiltered70.txt', 'r') as fi: identityMask70 = fi.read().splitlines()\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/pdbFiltered90.txt', 'r') as fi: identityMask90 = fi.read().splitlines()\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/pdbFiltered100.txt', 'r') as fi: identityMask100 = fi.read().splitlines()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(192, 911)\n",
      "(285, 911)\n",
      "(85, 911)\n",
      "(370, 911)\n",
      "(370, 911)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AR_ARp_1</th>\n",
       "      <th>AR_ARp_2</th>\n",
       "      <th>AR_ARp_3</th>\n",
       "      <th>AR_ARp_4</th>\n",
       "      <th>AR_ARp_5</th>\n",
       "      <th>AR_ARp_6</th>\n",
       "      <th>AR_ARp_7</th>\n",
       "      <th>AR_ARp_8</th>\n",
       "      <th>AR_ARp_9</th>\n",
       "      <th>AR_Ap_1</th>\n",
       "      <th>...</th>\n",
       "      <th>P_Pp_7</th>\n",
       "      <th>P_Pp_8</th>\n",
       "      <th>P_Pp_9</th>\n",
       "      <th>bligand</th>\n",
       "      <th>bprotein</th>\n",
       "      <th>gauss 1</th>\n",
       "      <th>gauss 2</th>\n",
       "      <th>hydrophobic</th>\n",
       "      <th>repulsion</th>\n",
       "      <th>pdb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>57</td>\n",
       "      <td>46</td>\n",
       "      <td>38</td>\n",
       "      <td>77</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>470.289098</td>\n",
       "      <td>194.579543</td>\n",
       "      <td>112.34222</td>\n",
       "      <td>1556.15735</td>\n",
       "      <td>45.22791</td>\n",
       "      <td>7.71044</td>\n",
       "      <td>2xb8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>35</td>\n",
       "      <td>38</td>\n",
       "      <td>55</td>\n",
       "      <td>85</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>508.907453</td>\n",
       "      <td>197.998528</td>\n",
       "      <td>124.89944</td>\n",
       "      <td>1589.85493</td>\n",
       "      <td>53.56811</td>\n",
       "      <td>7.06368</td>\n",
       "      <td>3n76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>306.160553</td>\n",
       "      <td>93.565008</td>\n",
       "      <td>67.82612</td>\n",
       "      <td>861.77083</td>\n",
       "      <td>7.36023</td>\n",
       "      <td>5.50020</td>\n",
       "      <td>3n7a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>26</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "      <td>31</td>\n",
       "      <td>62</td>\n",
       "      <td>76</td>\n",
       "      <td>65</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>520.723733</td>\n",
       "      <td>192.848039</td>\n",
       "      <td>129.89022</td>\n",
       "      <td>1682.94246</td>\n",
       "      <td>47.23877</td>\n",
       "      <td>7.08789</td>\n",
       "      <td>3n86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>366.375425</td>\n",
       "      <td>139.567586</td>\n",
       "      <td>86.81205</td>\n",
       "      <td>1099.02572</td>\n",
       "      <td>12.03979</td>\n",
       "      <td>6.04025</td>\n",
       "      <td>4ciw</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 911 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   AR_ARp_1  AR_ARp_2  AR_ARp_3  AR_ARp_4  AR_ARp_5  AR_ARp_6  AR_ARp_7  \\\n",
       "0         0        32         4        17        57        46        38   \n",
       "1         0        20        16         3        15        35        38   \n",
       "2         0         0         0         0         0         0         0   \n",
       "3         0        10        26        18        11        31        62   \n",
       "4         0         0         0         0         0         0         0   \n",
       "\n",
       "   AR_ARp_8  AR_ARp_9  AR_Ap_1  ...   P_Pp_7  P_Pp_8  P_Pp_9     bligand  \\\n",
       "0        77        92        0  ...        0       0       0  470.289098   \n",
       "1        55        85        0  ...        0       0       0  508.907453   \n",
       "2         0         0        0  ...        0       0       0  306.160553   \n",
       "3        76        65        0  ...        0       0       0  520.723733   \n",
       "4         0         0        0  ...        0       0       0  366.375425   \n",
       "\n",
       "     bprotein    gauss 1     gauss 2  hydrophobic  repulsion   pdb  \n",
       "0  194.579543  112.34222  1556.15735     45.22791    7.71044  2xb8  \n",
       "1  197.998528  124.89944  1589.85493     53.56811    7.06368  3n76  \n",
       "2   93.565008   67.82612   861.77083      7.36023    5.50020  3n7a  \n",
       "3  192.848039  129.89022  1682.94246     47.23877    7.08789  3n86  \n",
       "4  139.567586   86.81205  1099.02572     12.03979    6.04025  4ciw  \n",
       "\n",
       "[5 rows x 911 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open('/home/poltix/Documents/casf2013WMetalIon.pickle', 'rb') as fi:\n",
    "    df2013 = pickle.load(fi)\n",
    "with open('/home/poltix/Documents/casf2016WMetalIon.pickle', 'rb') as fi:\n",
    "    df2016 = pickle.load(fi)\n",
    "\n",
    "print(df2013.shape)\n",
    "print(df2016.shape)\n",
    "dfnr = df2013[~df2013['pdb'].isin(df2016['pdb'])]\n",
    "print(dfnr.shape)\n",
    "dfAll = df2016.append(dfnr,ignore_index = True)\n",
    "print(dfAll.shape)\n",
    "print(dfAll.shape)\n",
    "dfAll.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "vinaff = dfAll['Affinity']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 12002\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train100, y_train100 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, identityMask100)\n",
    "X_test100, y_test100 = preparingTestSet(X_train100, dfAll)\n",
    "svrPerf100, rfPerf100, lrPerf100, knnPerf100 = batchMlExecution(X_train100, y_train100, X_test100, y_test100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 10943\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train90, y_train90 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, identityMask90)\n",
    "X_test90, y_test90 = preparingTestSet(X_train90, dfAll)\n",
    "svrPerf90, rfPerf90, lrPerf90, knnPerf90 = batchMlExecution(X_train90, y_train90, X_test90, y_test90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 10523\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train70, y_train70 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, identityMask70)\n",
    "X_test70, y_test70 = preparingTestSet(X_train70, dfAll)\n",
    "svrPerf70, rfPerf70, lrPerf70, knnPerf70 = batchMlExecution(X_train70, y_train70, X_test70, y_test70)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 10173\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train50, y_train50 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, identityMask50)\n",
    "X_test50, y_test50 = preparingTestSet(X_train50, dfAll)\n",
    "svrPerf50, rfPerf50, lrPerf50, knnPerf50 = batchMlExecution(X_train50, y_train50, X_test50, y_test50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 9597\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train40, y_train40 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, identityMask40)\n",
    "X_test40, y_test40 = preparingTestSet(X_train40, dfAll)\n",
    "svrPerf40, rfPerf40, lrPerf40, knnPerf40 = batchMlExecution(X_train40, y_train40, X_test40, y_test40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 15698\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "X_train, y_train = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll)\n",
    "X_test, y_test = preparingTestSet(X_train, dfAll)\n",
    "SVRPerf, RFPerf, LRPerf, KNNPerf = batchMlExecution(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation Coefficient: R=0.808\n",
      "Accuracy: 79.325\n",
      "Mean absolute error: 1.12\n",
      "Standard error of the errors: 0.81\n",
      "RMSE: 1.384\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfopt = RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
    "           max_features=365, max_leaf_nodes=None,\n",
    "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
    "           min_samples_leaf=1, min_samples_split=5,\n",
    "           min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=None,\n",
    "           oob_score=False, random_state=None, verbose=0, warm_start=False)\n",
    "rfopt.fit(X_train, y_train)\n",
    "optRF = rfopt.predict(X_test)\n",
    "printPerformance(optRF, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "SASAFeaturesPDBBind = X_train[['CSA','bligand','bprotein']]\n",
    "SASACasf = X_test[['CSA','bligand','bprotein']]\n",
    "\n",
    "SASASVRPerf, SASARFPerf, SASALRPerf, SASAKNNPerf = batchMlExecution(SASAFeaturesPDBBind, y_train, SASACasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "vinaFeaturesPDBBind = X_train[[\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]]\n",
    "vinaCasf = X_test[[\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]]\n",
    "\n",
    "vinaSVRPerf, vinaRFPerf, vinaLRPerf, vinaKNNPerf = batchMlExecution(vinaFeaturesPDBBind, y_train, vinaCasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "featureMask = ['CSA','bligand','bprotein',\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]\n",
    "phCoFeaturesPDBBind = X_train.drop(featureMask, axis = 1)\n",
    "phCoCasf = X_test.drop(featureMask, axis = 1)\n",
    "\n",
    "phCoSVRPerf, phCoRFPerf, phCoLRPerf, phCoKNNPerf = batchMlExecution(phCoFeaturesPDBBind, y_train, phCoCasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "visaFeaturesPDBBind = X_train[['CSA','bligand','bprotein',\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]]\n",
    "visaCasf = X_test[['CSA','bligand','bprotein',\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]]\n",
    "\n",
    "visaSVRPerf, visaRFPerf, visaLRPerf, visaKNNPerf = batchMlExecution(visaFeaturesPDBBind, y_train, visaCasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "featureMask = ['CSA','bligand','bprotein']\n",
    "viphFeaturesPDBBind = X_train.drop(featureMask, axis = 1)\n",
    "viphCasf = X_test.drop(featureMask, axis = 1)\n",
    "\n",
    "viphSVRPerf, viphRFPerf, viphLRPerf, viphKNNPerf = batchMlExecution(viphFeaturesPDBBind, y_train, viphCasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "featureMask = [\"gauss 1\", \"gauss 2\",\"hydrophobic\", \"repulsion\",\"Hydrogen\", \"Ntors\"]\n",
    "saphiFeaturesPDBBind = X_train.drop(featureMask, axis = 1)\n",
    "saphiCasf = X_test.drop(featureMask, axis = 1)\n",
    "\n",
    "saphiSVRPerf, saphiRFPerf, saphiLRPerf, saphiKNNPerf = batchMlExecution(saphiFeaturesPDBBind, y_train, saphiCasf, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation Coefficient: R=0.812\n",
      "Accuracy: 78.932\n",
      "Mean absolute error: 1.13\n",
      "Standard error of the errors: 0.822\n",
      "RMSE: 1.398\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rfopt = RandomForestRegressor(n_jobs=-1, n_estimators=500, max_features=0.33)\n",
    "rfopt.fit(phCoFeaturesPDBBind, y_train)\n",
    "optRF = rfopt.predict(phCoCasf)\n",
    "printPerformance(optRF, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/filteredByTanimoto2013.tx', 'r') as fi:\n",
    "    tanimotoMask2013 = fi.read().splitlines()\n",
    "\n",
    "with open('/home/poltix/Scrivania/Spyder/phCo_revision/filteredByTanimoto2016.tx', 'r') as fi:\n",
    "    tanimotoMask2016 = fi.read().splitlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13265"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(tanimotoMask2013)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13514\n",
      "Number of samples in training set 13194\n",
      "Number of sample in test set: 370\n"
     ]
    }
   ],
   "source": [
    "#prepare training set\n",
    "\n",
    "# removing from features all the complexes in CASF\n",
    "#featuresTanimoto = pdbbind2018Features[pdbbind2018Features['pdb'].isin(tanimotoMask2016)]\n",
    "#featuresTanimoto = pdbbind2018Features[pdbbind2018Features['pdb'].isin(tanimotoMask2013)]\n",
    "\n",
    "tanimotoMask2013.extend(tanimotoMask2016)\n",
    "taniMask = set(tanimotoMask2013)\n",
    "print(len(taniMask))\n",
    "# print(f\"Number of complexes in the trainin set {len(featuresTanimoto)}\")\n",
    "# print(f\"Number of complexe in CASF-2016: {len(casfAll)}\")\n",
    "# print(f\"Features calculated for {len(dfAll)}\")\n",
    "\n",
    "X_trainTani, y_trainTani = preparingTrainingSet(pdbbind2018Features, affinityLabels, casfAll, taniMask)\n",
    "X_testTani, y_testTani = preparingTestSet(X_trainTani, dfAll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13145\n"
     ]
    }
   ],
   "source": [
    "print(len(set(tanimotoMask2016)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "taniSVRPerf, taniRFPerf, taniLRPerf, taniKNNPerf = batchMlExecution(X_trainTani, y_trainTani, X_testTani, y_testTani)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "performances = [[taniSVRPerf['correlation'][0][1], taniRFPerf['correlation'][0][1],\n",
    "                 taniLRPerf['correlation'][0][1], taniKNNPerf['correlation'][0][1]],\n",
    "                [svrPerf40['correlation'][0][1], rfPerf40['correlation'][0][1],\n",
    "                 lrPerf40['correlation'][0][1], knnPerf40['correlation'][0][1]],\n",
    "                [svrPerf50['correlation'][0][1], rfPerf50['correlation'][0][1],\n",
    "                 lrPerf50['correlation'][0][1], knnPerf50['correlation'][0][1]],\n",
    "                [svrPerf70['correlation'][0][1], rfPerf70['correlation'][0][1],\n",
    "                 lrPerf70['correlation'][0][1], knnPerf70['correlation'][0][1]],\n",
    "                [svrPerf90['correlation'][0][1], rfPerf90['correlation'][0][1],\n",
    "                 lrPerf90['correlation'][0][1], knnPerf90['correlation'][0][1]],\n",
    "               [svrPerf100['correlation'][0][1], rfPerf100['correlation'][0][1],\n",
    "                 lrPerf100['correlation'][0][1], knnPerf100['correlation'][0][1]],\n",
    "               [SVRPerf['correlation'][0][1], RFPerf['correlation'][0][1], LRPerf['correlation'][0][1], KNNPerf['correlation'][0][1]]\n",
    "               ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xtick = ['SVM','RF','LR','KNN']\n",
    "ytick = ['tani','40%','50%','70%','90%','100%','All']\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(performances, interpolation='nearest')\n",
    "fig.colorbar(cax)\n",
    "\n",
    "for (i, j), z in np.ndenumerate(performances):\n",
    "    ax.text(j, i, '{:0.2f}'.format(z), ha='center', va='center')\n",
    "\n",
    "ax.set_xticklabels(['']+xtick)\n",
    "ax.set_yticklabels(['']+ytick, rotation=90)\n",
    "\n",
    "#plt.savefig(\"/home/poltix/Scrivania/Spyder/phCo_revision/matrix_plotv2.tiff\", dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'correlation': array([[1.        , 0.62645245],\n",
       "         [0.62645245, 1.        ]]),\n",
       "  'errors': array([1.3576552 , 0.43830992, 0.59963819, 0.87752138, 1.25116605,\n",
       "         2.03298539, 3.74232528, 0.91996436, 2.41454318, 3.45305186,\n",
       "         2.86800066, 2.73733948, 1.6549818 , 2.60045903, 0.42241752,\n",
       "         2.54754746, 1.59889377, 0.16959317, 1.12100869, 1.36109695,\n",
       "         1.88572232, 0.43103469, 1.88972021, 0.34737213, 2.90100337,\n",
       "         4.19683   , 0.02879717, 2.22039425, 1.55472948, 1.33706443,\n",
       "         0.17687742, 1.16119646, 1.65608848, 0.14264652, 3.23152244,\n",
       "         1.21940707, 0.9743613 , 0.31589826, 0.99148458, 0.00689442,\n",
       "         0.55593307, 0.40324916, 2.00831813, 0.17804577, 2.15308505,\n",
       "         1.03666026, 2.10942794, 1.25673638, 1.26881544, 2.3694164 ,\n",
       "         1.40119824, 0.73072251, 1.98697024, 1.4343532 , 1.30563755,\n",
       "         1.30140486, 1.07692574, 0.74693616, 1.69305878, 1.30133032,\n",
       "         0.44695897, 1.61720405, 0.13299837, 0.77669193, 0.99343374,\n",
       "         1.28985691, 0.26984932, 0.85829355, 0.6479535 , 2.11309143,\n",
       "         0.06162671, 0.93538503, 2.00418706, 1.22797524, 0.72885382,\n",
       "         0.28535189, 0.15746644, 0.73087694, 0.18217351, 0.61997883,\n",
       "         3.03498225, 2.66962703, 0.77979729, 2.35684964, 3.46395114,\n",
       "         1.32868217, 0.74821999, 1.14105722, 0.15541383, 2.03296594,\n",
       "         1.8328112 , 2.16257063, 1.8650852 , 1.29057571, 1.03032013,\n",
       "         1.73914892, 1.02140687, 0.24674351, 1.29409137, 3.20356089,\n",
       "         0.03730894, 1.82320945, 0.04333608, 0.8433225 , 1.21642185,\n",
       "         1.65923959, 1.16932868, 0.55138469, 2.53652494, 2.31404219,\n",
       "         0.5045869 , 0.38163241, 1.46403652, 0.45052082, 0.15102476,\n",
       "         0.28757344, 3.80153332, 2.52789232, 0.64650312, 1.73373317,\n",
       "         0.10904279, 0.88737571, 0.83622888, 2.56707439, 0.8634759 ,\n",
       "         2.16453258, 0.40815603, 0.42222684, 2.65127652, 0.736754  ,\n",
       "         1.49830321, 0.92523231, 0.81162518, 2.45581207, 1.6352757 ,\n",
       "         2.47106615, 3.4833832 , 2.11552528, 1.61615804, 2.19396996,\n",
       "         0.78759463, 1.12637914, 1.82807159, 0.92421651, 2.24879849,\n",
       "         0.71218063, 1.89852889, 1.09619671, 1.08446251, 0.09041566,\n",
       "         0.51207757, 3.42265859, 2.34825603, 0.47657124, 2.86792705,\n",
       "         1.46740735, 2.55049797, 1.85581856, 1.70936684, 0.64952662,\n",
       "         2.35944022, 2.67692825, 3.83381636, 2.46528152, 4.03018877,\n",
       "         0.13735558, 2.30243841, 2.20479664, 1.19579309, 1.77882576,\n",
       "         1.02392843, 0.21580782, 0.88985981, 0.67656593, 0.537013  ,\n",
       "         0.28849482, 1.3254374 , 1.70111931, 0.53217538, 0.78799261,\n",
       "         0.7394311 , 0.63884324, 2.96881314, 2.12050915, 1.48583995,\n",
       "         0.9362374 , 0.18102637, 0.59975913, 0.08221543, 2.42043934,\n",
       "         1.84570941, 1.02093782, 1.6736688 , 2.53221701, 0.71066694,\n",
       "         1.66413304, 0.14202155, 0.65594794, 1.45729909, 1.04366372,\n",
       "         1.03582951, 1.1713681 , 0.07894479, 0.94873315, 2.62404638,\n",
       "         0.06923735, 1.32351189, 0.77746224, 2.06361541, 0.75535793,\n",
       "         0.40113133, 0.33666177, 3.86489479, 0.11823947, 0.32721151,\n",
       "         0.29513995, 0.75690104, 1.47098497, 0.85579739, 0.13431493,\n",
       "         1.67753934, 0.32123093, 2.14058131, 1.07818298, 3.25498743,\n",
       "         2.86290452, 0.72014481, 3.31788296, 0.32869598, 3.54356412,\n",
       "         1.68744779, 0.62053732, 0.70855839, 0.37605265, 0.08751315,\n",
       "         0.85172339, 1.64755002, 2.14233035, 2.60564485, 1.33937962,\n",
       "         1.78999589, 0.65768091, 1.34621331, 2.38619055, 2.89429638,\n",
       "         1.35534467, 0.8158936 , 0.90776155, 1.55515008, 1.79902488,\n",
       "         0.45786858, 0.35985071, 0.83931023, 1.60616375, 0.2805654 ,\n",
       "         0.92890116, 0.81631383, 1.76763588, 0.27071974, 3.18663968,\n",
       "         0.4357348 , 0.9275288 , 1.4327812 , 2.1762938 , 1.84513341,\n",
       "         1.10223484, 1.07090324, 2.99200423, 2.64782345, 0.47965891,\n",
       "         0.5867765 , 0.9505017 , 0.83239054, 0.56546839, 1.81802108,\n",
       "         1.58612041, 0.92653373, 0.72703465, 0.29654086, 0.66959756,\n",
       "         0.28360159, 0.19734546, 0.95559986, 2.15803729, 2.50899144,\n",
       "         0.74836489, 0.15137532, 0.79916366, 1.53035216, 1.3307534 ,\n",
       "         3.31333526, 1.82139436, 1.34747464, 1.34275013, 0.45572819,\n",
       "         1.53490835, 1.18607153, 3.36785739, 2.18818054, 1.21265836,\n",
       "         1.46254859, 1.67994188, 2.16222767, 3.59395821, 0.30420187,\n",
       "         1.697736  , 2.66050547, 0.1630764 , 2.5256918 , 0.83518276,\n",
       "         0.31461017, 1.72875785, 2.01351621, 0.30235339, 1.66952983,\n",
       "         0.43567325, 1.44877584, 1.43112381, 1.1141096 , 2.27202927,\n",
       "         0.19644718, 1.98780443, 4.39847029, 0.49118996, 0.793096  ,\n",
       "         0.76819009, 0.16822345, 1.10839605, 0.49475738, 2.71172475,\n",
       "         0.39695308, 1.30305959, 1.16178001, 0.83814181, 2.34252849,\n",
       "         1.94476827, 0.8685519 , 3.48557364, 2.03052374, 2.3751321 ,\n",
       "         1.97091333, 1.09083861, 1.46644502, 1.41805615, 2.10929381,\n",
       "         3.96256827, 0.78836666, 1.12582707, 0.66715163, 1.29943227,\n",
       "         1.26840503, 2.7423925 , 0.17957996, 0.61938951, 2.6056655 ,\n",
       "         2.18666488, 2.87058016, 0.46440882, 1.03720742, 1.22348309,\n",
       "         0.98823007, 0.6770488 , 2.02182566, 3.18440913, 0.48537601,\n",
       "         2.63746857, 0.77621098, 0.50059844, 3.21144915, 3.00903381]),\n",
       "  'mae': 1.39,\n",
       "  'mape': array([ 17.89914874,   6.39507022,  16.21095036,  15.56365766,\n",
       "          25.93676873,  33.19193025,  74.8465056 ,   9.09639108,\n",
       "          21.36569131,  29.2039793 ,  33.12705805,  26.9054414 ,\n",
       "          23.30181504,  27.67052171,   6.47160649,  25.76909627,\n",
       "          29.79380184,   2.61869255,  12.32296122,  16.3068361 ,\n",
       "          30.80212308,   5.98776031,  33.15897806,   6.59449691,\n",
       "          36.93723784, 183.74939314,   0.5893745 ,  62.07847025,\n",
       "          22.78356206,  15.60416841,   2.48451734,  13.24123033,\n",
       "          17.86964652,   1.69858939,  33.93430208,  20.93794944,\n",
       "          20.19858488,   8.04948512,  19.18696254,   0.23271718,\n",
       "           9.1730854 ,   6.03867027,  23.56384722,   2.52699266,\n",
       "          42.51334068,  18.91202949,  26.30954477,  19.58854828,\n",
       "          17.65409966,  53.20397669,  27.49113165,  28.96383788,\n",
       "          93.50717751,  30.23046531,  42.15936355,  55.22506776,\n",
       "          37.31478184,  12.53541505,  41.10177619,  23.56253644,\n",
       "          11.08147429,  30.88728906,   2.25826286,  12.30928782,\n",
       "          14.35428048,  14.7501098 ,   6.11741168,  30.07470398,\n",
       "           9.64037716,  19.62097967,   0.93680452,  11.75312461,\n",
       "          88.13145045,  24.09254308,  20.43306816,   3.93151682,\n",
       "           2.80735637,  15.23968368,   2.6848831 ,   9.90438901,\n",
       "          33.72202495,  33.5438969 ,  27.01947287,  41.65828418,\n",
       "          31.24565195,  27.93131797,  12.5569609 ,  20.66055171,\n",
       "           2.12349984,  25.26755178,  28.18378244,  24.0285626 ,\n",
       "          45.76086863,  16.55458663,  44.77647552,  19.32387684,\n",
       "          13.67615976,   3.58668739,  24.2656648 ,  77.65232754,\n",
       "           0.52144584,  21.39194403,   0.63479216,  19.02890075,\n",
       "          19.30512709,  41.78796179,  24.95295658,  10.99859533,\n",
       "          71.11026349,  77.57519442,   7.05232442,   5.96492629,\n",
       "          45.44088288,   7.99040561,   2.51707932,   4.05822586,\n",
       "          34.07948657,  26.00378819,   7.66744049,  29.94107016,\n",
       "           2.66158623,  12.28737601,   9.58841015,  26.95691561,\n",
       "          10.40203321,  24.53031469,   5.94142441,   5.70735686,\n",
       "          55.73465898,  11.43371496,  40.96436191,  11.82570432,\n",
       "          11.08965619,  27.28680074,  28.07866291,  27.34626084,\n",
       "          33.81587278,  22.1808928 ,  20.30704586,  46.73128139,\n",
       "          11.58929566,  23.02120331,  33.57398165,  11.0052764 ,\n",
       "          76.99205878,  15.08312814,  20.41202848,  13.51075929,\n",
       "          15.71769203,   1.55249097,   8.66961445,  83.65259831,\n",
       "          97.97236014,   9.34018826,  81.50860572,  23.79261404,\n",
       "          82.21119925,  19.62597205,  33.11987719,   8.63401693,\n",
       "         113.950632  ,  52.2920643 , 116.71268468,  86.70957088,\n",
       "         109.82679037,   2.3464056 ,  81.53373988,  27.20804313,\n",
       "          16.66860264,  18.62090633,  16.20458184,   2.69759779,\n",
       "          10.05051586,  12.03899219,   7.73449003,   3.95142627,\n",
       "          27.30680596,  41.99662053,   9.49963737,  11.83602644,\n",
       "          12.28754447,  11.47216687,  69.02563204,  64.23780322,\n",
       "          64.81506783,  10.40263778,   2.73161252,   7.07139204,\n",
       "           1.02769282,  55.26288872,  42.91319539,  10.52624988,\n",
       "          27.37656432,  21.41607371,   8.92953889,  25.77680581,\n",
       "           2.75507764,   9.03554699,  16.75254754,  22.92724799,\n",
       "          17.49470056,  15.0254762 ,   1.51181686,  25.20229288,\n",
       "         109.429192  ,   1.06377625,  14.54029516,   9.53367981,\n",
       "          50.23522233,  14.42466434,   4.58712209,   4.091089  ,\n",
       "          36.12398938,   1.81228553,   4.42300845,   3.57666843,\n",
       "          14.71806294,  30.24677047,  14.95224383,   2.05449835,\n",
       "          22.06690474,   5.13178187,  31.08724239,  12.0351628 ,\n",
       "          29.00580376,  33.59081598,  11.39530129,  29.28947411,\n",
       "           4.42973571, 112.16413127,  20.84063902,   8.37552616,\n",
       "           9.08888273,   6.16128885,   1.3454339 ,  11.63753883,\n",
       "          29.22083179,  77.35298213,  25.62721551,  16.65696453,\n",
       "          54.64428085,   9.07881757,  16.03028017,  44.54717581,\n",
       "          26.50255851,  37.44264553,  17.53234825,  13.48261851,\n",
       "          26.09922074,  35.82742101,  10.93176032,   5.97532712,\n",
       "          11.72032591,  20.86206009,   4.31800311,  11.19019154,\n",
       "          12.95524439,  37.9518311 ,   3.94446621,  31.86639682,\n",
       "           5.58929581,  14.36707827,  27.58626966,  25.19362386,\n",
       "          18.36728995,  14.39404127,  12.27924537,  29.92004228,\n",
       "          27.80486361,   7.23583982,   7.02175766,  14.18877378,\n",
       "          11.5260035 ,   7.13574032,  19.71428   ,  32.2328558 ,\n",
       "          24.40893088,   8.6572975 ,   3.98378444,  10.58166751,\n",
       "           7.06666983,   3.42046472,  12.91710751,  23.43754443,\n",
       "          97.55532414,  10.27409716,   2.20861024,  11.21642852,\n",
       "          65.21051317,  14.48504249,  49.29644095,  44.63193379,\n",
       "          35.67311353,  22.42715261,   8.44263168,  25.53501125,\n",
       "          17.86717238,  29.7061432 ,  38.67698867,  28.19460359,\n",
       "          29.9331076 ,  27.62643412,  68.09686435,  31.18975983,\n",
       "           5.07003117,  36.89078387,  78.29759985,   2.86150657,\n",
       "          40.49807811,   9.60093854,   3.8458757 ,  19.96814794,\n",
       "          76.9638422 ,   4.7257928 ,  27.68009805,   5.92855808,\n",
       "          27.74450028,  16.45164664,  21.1822515 ,  31.02502487,\n",
       "           3.1261503 ,  23.04142987,  41.49372554,   6.37994386,\n",
       "          16.33945035,  11.09969953,   2.32023909,  16.30982373,\n",
       "           6.92678722,  27.11724745,   5.47384679,  51.04348813,\n",
       "          39.26780021,  13.81817821,  29.4338996 ,  22.35630504,\n",
       "          11.28140389, 138.15858741,  39.01761967,  29.29402828,\n",
       "          26.19892455,  23.70326801,  34.96680862,  19.16825694,\n",
       "          40.3936213 ,  35.84245002,  16.438415  ,  12.33003661,\n",
       "          10.6320587 ,  35.12957022,  20.33817668,  30.97393449,\n",
       "           6.22232956,  14.18164746,  31.51656504,  39.19302569,\n",
       "          36.85990385,   5.80511027,  20.99906801,  29.22039109,\n",
       "          18.29274926,  16.0367848 ,  54.33194811,  40.34579814,\n",
       "           8.29153782,  62.68331979,  11.08872824,   7.83750581,\n",
       "          32.9144376 ,  38.72854145]),\n",
       "  'rmse': 1.687,\n",
       "  'accuracy': 74.70140957456329},\n",
       " {'correlation': array([[1.        , 0.72286246],\n",
       "         [0.72286246, 1.        ]]),\n",
       "  'errors': array([1.27075561, 0.51333242, 0.90933742, 0.62145593, 1.09020828,\n",
       "         0.33745896, 0.17726473, 1.39707816, 1.7167638 , 1.81068919,\n",
       "         2.33329996, 3.82051539, 2.88594531, 1.92029947, 0.1336267 ,\n",
       "         2.92977814, 1.18349132, 0.07376934, 1.73339477, 0.40705544,\n",
       "         1.16278256, 0.99956371, 0.16897222, 0.06721905, 2.60581026,\n",
       "         3.07129218, 0.92430712, 1.55894888, 0.52107867, 1.26795288,\n",
       "         0.633281  , 1.20675504, 1.82558851, 0.7290628 , 1.57520122,\n",
       "         0.65998858, 0.42489862, 0.08079629, 0.30496312, 1.32993831,\n",
       "         0.12275706, 0.67587742, 1.19329359, 0.91418768, 0.80467152,\n",
       "         0.5761864 , 0.87043187, 2.11439652, 0.78441694, 1.41326812,\n",
       "         0.08510729, 1.66836253, 3.12120203, 1.01206531, 2.2733432 ,\n",
       "         2.07749293, 1.27660764, 0.30838758, 2.74055241, 0.44813738,\n",
       "         0.52247134, 0.82236618, 0.44819416, 0.48433913, 0.13251853,\n",
       "         1.1101289 , 0.92850174, 2.01012763, 0.06211294, 3.13755104,\n",
       "         0.04787739, 0.6644096 , 0.66356672, 0.66858859, 1.62923326,\n",
       "         0.02672952, 0.64890092, 0.52311671, 0.19098828, 0.34437358,\n",
       "         3.94147758, 2.9078081 , 1.34924488, 0.11478945, 4.250354  ,\n",
       "         1.96866978, 0.78983921, 0.8337365 , 0.02125253, 0.78513103,\n",
       "         0.34269941, 0.74494526, 0.29318124, 1.57157519, 1.86288522,\n",
       "         1.36784736, 0.03821864, 1.1290587 , 2.00286235, 3.60597216,\n",
       "         0.94182234, 1.04314974, 0.19694801, 0.44445484, 0.52282431,\n",
       "         0.65256317, 0.43722652, 0.25291197, 1.82352526, 1.13088007,\n",
       "         0.2450779 , 0.29398819, 1.8224336 , 0.64436811, 0.20422708,\n",
       "         0.90843946, 3.13382904, 0.25307526, 0.48642155, 1.35997019,\n",
       "         0.68456643, 1.09523967, 0.22563861, 1.68919261, 0.25892306,\n",
       "         2.1279261 , 0.08443786, 1.43026116, 2.61880595, 0.29474514,\n",
       "         1.1852512 , 0.39844417, 0.05760735, 2.20974569, 1.01686133,\n",
       "         0.78467211, 2.61635066, 1.82804164, 0.30970408, 2.56300596,\n",
       "         0.36584234, 1.90124096, 0.32587731, 1.95995499, 3.1329632 ,\n",
       "         1.79406052, 2.02602294, 1.12996326, 0.70197895, 0.04247817,\n",
       "         0.26403183, 1.07448753, 2.37276503, 0.44429159, 1.44877005,\n",
       "         0.89727395, 1.33628157, 1.99471618, 0.85990572, 1.1509252 ,\n",
       "         2.15948672, 2.16646239, 1.90546575, 1.99391567, 2.5299084 ,\n",
       "         0.45876832, 1.92851229, 0.83165488, 0.91718325, 0.83014823,\n",
       "         1.04035133, 0.33626625, 1.68264952, 0.03869378, 0.55713346,\n",
       "         0.67379764, 1.67754741, 2.12721612, 1.7369262 , 0.50419717,\n",
       "         1.84131053, 1.87128239, 1.88016241, 1.26800842, 2.44798091,\n",
       "         0.96887858, 0.11162995, 0.94696934, 0.62672342, 1.24649033,\n",
       "         0.88097055, 0.82007457, 0.3813846 , 0.96502433, 0.93686782,\n",
       "         0.80665794, 1.08645955, 0.92448779, 1.76121968, 2.04319614,\n",
       "         0.38963419, 1.57375981, 0.83709535, 0.83560121, 1.57367868,\n",
       "         0.62558055, 1.84854659, 1.0688318 , 0.88818986, 0.98605496,\n",
       "         1.511833  , 0.66322072, 2.87973255, 1.36464759, 0.09838218,\n",
       "         0.5520091 , 1.69816449, 0.96041479, 1.06186941, 1.48760156,\n",
       "         0.39790514, 0.80169616, 1.15896243, 1.71154881, 2.42001012,\n",
       "         2.36419873, 0.30900335, 4.34080233, 0.47321654, 0.56121343,\n",
       "         2.16661126, 0.04198517, 0.38849613, 0.30738075, 0.00866483,\n",
       "         0.6578837 , 0.23109832, 1.72671701, 2.75793211, 1.02206382,\n",
       "         1.65131234, 0.43899292, 3.72744594, 2.2383494 , 2.99509727,\n",
       "         0.21877946, 0.86869569, 0.17742682, 0.30466079, 1.65024751,\n",
       "         0.80530446, 1.42199485, 3.24395525, 1.59593121, 0.34375047,\n",
       "         0.49508643, 0.65188066, 0.28091466, 0.01803829, 2.11862599,\n",
       "         1.02954723, 0.88041768, 2.05732253, 1.54385064, 2.06249716,\n",
       "         0.28939111, 0.40902335, 1.58823848, 1.9684007 , 0.08833944,\n",
       "         0.77988041, 0.07265853, 0.43322596, 1.50475545, 2.45910227,\n",
       "         0.79289802, 0.90116218, 2.20432669, 0.95875093, 0.86906953,\n",
       "         0.42099177, 1.25836952, 1.49584483, 2.88919344, 1.13671191,\n",
       "         0.76346657, 0.90949724, 1.49620423, 1.67514834, 1.50929381,\n",
       "         2.05809927, 0.54391924, 1.72190612, 0.95868634, 1.59707936,\n",
       "         0.29030397, 0.11287607, 3.44028238, 1.73928987, 0.81893532,\n",
       "         1.95879647, 1.2955221 , 2.37177505, 1.17169232, 1.17178133,\n",
       "         1.11529697, 0.74441798, 0.48674008, 2.06877372, 0.95968178,\n",
       "         1.09500105, 0.42036396, 1.88640587, 0.58276434, 1.31520299,\n",
       "         0.06341315, 0.63966283, 1.17882122, 0.75704681, 3.09215084,\n",
       "         0.91133276, 1.94052016, 2.14799708, 0.90894519, 0.78911591,\n",
       "         0.90228207, 0.22240023, 0.01157488, 0.32143366, 2.96297387,\n",
       "         0.58312613, 1.13014116, 0.98310607, 0.62018266, 2.16448081,\n",
       "         1.77529953, 1.74442724, 4.20884903, 1.21598358, 1.4686278 ,\n",
       "         2.55162932, 1.69260801, 0.6956129 , 3.25558202, 1.84556584,\n",
       "         4.94404764, 1.10651746, 1.43853128, 0.52464725, 0.79198345,\n",
       "         1.13673405, 1.7585943 , 0.6372136 , 0.20034915, 1.00029393,\n",
       "         2.11301762, 1.76093918, 0.58982691, 0.39186093, 0.15639138,\n",
       "         0.90314254, 0.43934269, 0.99863419, 1.94133665, 0.18431537,\n",
       "         3.47426317, 1.37859441, 1.18981525, 2.85279533, 2.15547757]),\n",
       "  'mae': 1.22,\n",
       "  'mape': array([1.67534758e+01, 7.48967040e+00, 2.45835305e+01, 1.10220989e+01,\n",
       "         2.26001018e+01, 5.50958919e+00, 3.54529464e+00, 1.38139801e+01,\n",
       "         1.51912153e+01, 1.53137954e+01, 2.69509572e+01, 3.75520295e+01,\n",
       "         4.06335368e+01, 2.04331956e+01, 2.04721483e+00, 2.96354578e+01,\n",
       "         2.20531886e+01, 1.13907423e+00, 1.90547644e+01, 4.87679174e+00,\n",
       "         1.89933434e+01, 1.38855365e+01, 2.96496076e+00, 1.27608336e+00,\n",
       "         3.31786699e+01, 1.34470082e+02, 1.89172412e+01, 4.35855758e+01,\n",
       "         7.63607323e+00, 1.47976042e+01, 8.89541252e+00, 1.37607390e+01,\n",
       "         1.96985981e+01, 8.68144808e+00, 1.65412294e+01, 1.13323990e+01,\n",
       "         8.80818119e+00, 2.05879104e+00, 5.90157027e+00, 4.48913187e+01,\n",
       "         2.02553329e+00, 1.01212880e+01, 1.40010626e+01, 1.29750092e+01,\n",
       "         1.58884920e+01, 1.05114998e+01, 1.08563396e+01, 3.29567594e+01,\n",
       "         1.09142547e+01, 3.17341789e+01, 1.66978200e+00, 6.61293190e+01,\n",
       "         1.46884330e+02, 2.13303148e+01, 7.34068213e+01, 8.81583368e+01,\n",
       "         4.42336309e+01, 5.17549757e+00, 6.65314006e+01, 8.11419908e+00,\n",
       "         1.29536560e+01, 1.57065287e+01, 7.61017043e+00, 7.67597747e+00,\n",
       "         1.91478106e+00, 1.26948370e+01, 2.10488851e+01, 7.04351019e+01,\n",
       "         9.24128251e-01, 2.91335360e+01, 7.27797303e-01, 8.34831484e+00,\n",
       "         2.91794608e+01, 1.31175278e+01, 4.56747754e+01, 3.68273501e-01,\n",
       "         1.15687897e+01, 1.09076271e+01, 2.81479559e+00, 5.50149414e+00,\n",
       "         4.37941954e+01, 3.65366449e+01, 4.67504642e+01, 2.02895071e+00,\n",
       "         3.83391903e+01, 4.13850227e+01, 1.32554331e+01, 1.50960494e+01,\n",
       "         2.90384340e-01, 9.75832329e+00, 5.26980942e+00, 8.27716960e+00,\n",
       "         7.19335952e+00, 2.01590479e+01, 8.09587544e+01, 1.51983041e+01,\n",
       "         5.11729667e-01, 1.64121060e+01, 3.75559157e+01, 8.74065269e+01,\n",
       "         1.31633158e+01, 1.22394061e+01, 2.88491851e+00, 1.00287696e+01,\n",
       "         8.29744200e+00, 1.64348084e+01, 9.33022048e+00, 5.04489229e+00,\n",
       "         5.11216585e+01, 3.79112540e+01, 3.42531461e+00, 4.59504454e+00,\n",
       "         5.65648402e+01, 1.14284677e+01, 3.40378470e+00, 1.28198645e+01,\n",
       "         2.80937390e+01, 2.60332107e+00, 5.76889457e+00, 2.34862917e+01,\n",
       "         1.67093353e+01, 1.51656412e+01, 2.58722890e+00, 1.77382560e+01,\n",
       "         3.11916791e+00, 2.41154591e+01, 1.22914066e+00, 1.93332355e+01,\n",
       "         5.50520685e+01, 4.57416170e+00, 3.24053628e+01, 5.09264848e+00,\n",
       "         7.87119111e-01, 2.45527298e+01, 1.74601179e+01, 8.68363969e+00,\n",
       "         2.53989228e+01, 1.91666799e+01, 3.89143561e+00, 5.45917014e+01,\n",
       "         5.38329605e+00, 3.88580125e+01, 5.98499478e+00, 2.33385210e+01,\n",
       "         1.07263184e+02, 3.79960413e+01, 2.17827804e+01, 1.39269362e+01,\n",
       "         1.01741543e+01, 7.29375572e-01, 4.47013169e+00, 2.62613612e+01,\n",
       "         9.89949083e+01, 8.70754846e+00, 4.11751152e+01, 1.45484435e+01,\n",
       "         4.30728868e+01, 2.10948660e+01, 1.66611234e+01, 1.52989998e+01,\n",
       "         1.04293753e+02, 4.23204435e+01, 5.80080011e+01, 7.01305597e+01,\n",
       "         6.89426067e+01, 7.83700636e+00, 6.82923023e+01, 1.02629428e+01,\n",
       "         1.27849569e+01, 8.69006556e+00, 1.64644888e+01, 4.20332813e+00,\n",
       "         1.90046742e+01, 6.88527367e-01, 8.02428098e+00, 9.22880257e+00,\n",
       "         3.45610148e+01, 5.25159450e+01, 3.10051339e+01, 7.57328301e+00,\n",
       "         3.05980977e+01, 3.36039617e+01, 4.37142362e+01, 3.84125082e+01,\n",
       "         1.06785424e+02, 1.07653175e+01, 1.68444950e+00, 1.11651347e+01,\n",
       "         7.83404274e+00, 2.84595673e+01, 2.04827809e+01, 8.45527482e+00,\n",
       "         6.23839084e+00, 8.16163551e+00, 1.17717559e+01, 1.24948334e+01,\n",
       "         2.10762408e+01, 1.27346278e+01, 2.02463014e+01, 4.48850176e+01,\n",
       "         6.58074839e+00, 2.01870707e+01, 1.60306319e+01, 2.21970388e+01,\n",
       "         6.56262738e+01, 9.61154264e+00, 2.03084032e+01, 1.31066174e+01,\n",
       "         2.16214779e+01, 1.88301613e+01, 1.72885090e+01, 8.05940935e+00,\n",
       "         2.69159792e+01, 2.09162908e+01, 1.32985906e+00, 6.68955016e+00,\n",
       "         3.30210827e+01, 1.97482954e+01, 1.85526745e+01, 2.27545446e+01,\n",
       "         5.23417519e+00, 1.28073899e+01, 1.68313840e+01, 1.91050769e+01,\n",
       "         2.15651643e+01, 2.77394388e+01, 4.88955316e+00, 3.83195606e+01,\n",
       "         6.37739545e+00, 1.77640406e+01, 2.67584950e+01, 5.66682836e-01,\n",
       "         4.98335186e+00, 5.03616079e+00, 1.33213756e-01, 8.98900649e+00,\n",
       "         4.09874366e+00, 6.23464584e+01, 2.71250015e+01, 1.27107210e+01,\n",
       "         5.04106046e+01, 6.05998525e+00, 4.43852414e+01, 4.17871674e+01,\n",
       "         2.74255743e+01, 6.04398408e+00, 1.86669871e+01, 2.63524939e+00,\n",
       "         5.11295291e+00, 3.28645328e+01, 1.92269041e+01, 2.36122482e+01,\n",
       "         4.52993561e+01, 2.07291522e+01, 5.29044425e+00, 5.96415659e+00,\n",
       "         1.03456206e+01, 6.03134723e+00, 2.62823213e-01, 2.11862599e+01,\n",
       "         1.32062991e+01, 1.36373445e+01, 3.96109708e+01, 1.78722158e+01,\n",
       "         2.05310268e+01, 3.77914711e+00, 4.68996437e+00, 1.58823848e+01,\n",
       "         2.06702275e+01, 1.33263461e+00, 9.33256744e+00, 1.08462239e+00,\n",
       "         5.99882353e+00, 1.89887610e+01, 2.66660443e+01, 1.61131320e+01,\n",
       "         2.37405338e+01, 2.62484215e+01, 1.28800361e+01, 1.37339281e+01,\n",
       "         1.04901027e+01, 2.18105275e+01, 2.02197481e+01, 3.13783269e+01,\n",
       "         4.41979584e+01, 1.04814239e+01, 1.32698312e+01, 2.09995381e+01,\n",
       "         7.13804871e+01, 1.64284269e+01, 3.06207979e+01, 1.33283423e+01,\n",
       "         4.55858319e+01, 1.60123646e+01, 2.95868304e+01, 4.82954905e+00,\n",
       "         1.70038327e+00, 3.03449669e+01, 3.07426620e+01, 1.90404466e+01,\n",
       "         4.00895162e+01, 2.13046989e+01, 7.46963173e+01, 1.01683993e+01,\n",
       "         1.95296888e+01, 2.42347335e+01, 2.19079199e+01, 8.54084306e+00,\n",
       "         3.31716482e+01, 1.10321311e+01, 1.33855747e+01, 4.85544562e+00,\n",
       "         7.21052269e+01, 9.10862470e+00, 2.18055089e+01, 8.62914036e-01,\n",
       "         1.22497388e+01, 1.35512735e+01, 1.43935174e+01, 4.22239529e+01,\n",
       "         1.45024386e+01, 2.24933391e+01, 2.02634996e+01, 1.18060622e+01,\n",
       "         1.62574520e+01, 1.30372157e+01, 3.06747777e+00, 1.70322002e-01,\n",
       "         4.50019069e+00, 2.96297387e+01, 8.04110939e+00, 4.42699226e+01,\n",
       "         3.32286771e+01, 1.02247548e+01, 2.71967283e+01, 2.04081579e+01,\n",
       "         2.26579301e+01, 1.66827242e+02, 2.33657868e+01, 1.81135291e+01,\n",
       "         3.39182566e+01, 3.67793557e+01, 1.65866179e+01, 4.40066021e+01,\n",
       "         3.53431502e+01, 4.47201835e+01, 2.30722508e+01, 1.57547671e+01,\n",
       "         8.36103825e+00, 2.14109185e+01, 1.82269049e+01, 1.98624320e+01,\n",
       "         2.20790399e+01, 4.58722825e+00, 1.20989547e+01, 3.78729976e+01,\n",
       "         2.26114741e+01, 7.37283639e+00, 7.93352830e+00, 3.73508833e+00,\n",
       "         1.67177265e+01, 1.04064053e+01, 2.68360136e+01, 2.45963296e+01,\n",
       "         3.14860603e+00, 8.25709742e+01, 1.96942058e+01, 1.86280724e+01,\n",
       "         2.92385616e+01, 2.77426270e+01]),\n",
       "  'rmse': 1.516,\n",
       "  'accuracy': 77.86827513679219},\n",
       " {'correlation': array([[1.        , 0.70885771],\n",
       "         [0.70885771, 1.        ]]),\n",
       "  'errors': array([1.38978878e+00, 5.57312113e-01, 6.22071047e-02, 5.92482929e-01,\n",
       "         1.09020828e+00, 6.56845622e-02, 1.67061797e-01, 6.00219009e-01,\n",
       "         1.12810422e+00, 1.81068919e+00, 2.32778596e+00, 3.86057942e+00,\n",
       "         2.88594531e+00, 2.00955467e+00, 5.66788792e-01, 2.76524963e+00,\n",
       "         1.48349132e+00, 3.95270672e-02, 1.89681924e+00, 4.71400711e-01,\n",
       "         1.25337453e+00, 8.23220915e-01, 1.59696819e-01, 2.15929594e-01,\n",
       "         2.33692570e+00, 3.40760997e+00, 1.12476670e+00, 1.86887089e+00,\n",
       "         5.21078668e-01, 1.35258659e+00, 8.66248517e-01, 8.01399219e-01,\n",
       "         1.76003808e+00, 6.66060973e-01, 1.81991702e+00, 1.42185450e+00,\n",
       "         4.25824724e-01, 2.07018773e-01, 4.69424352e-01, 1.36837503e+00,\n",
       "         2.66249413e-01, 6.75877415e-01, 1.21004270e+00, 9.14187682e-01,\n",
       "         8.04671523e-01, 5.76186398e-01, 5.65601399e-01, 1.78027685e+00,\n",
       "         9.10173369e-01, 1.70219829e+00, 8.51072858e-02, 1.66836253e+00,\n",
       "         3.49811422e+00, 1.01206531e+00, 2.44946448e+00, 2.06012921e+00,\n",
       "         1.70377227e+00, 3.64016156e-01, 2.62294328e+00, 2.02848222e-01,\n",
       "         7.87351677e-01, 1.16240559e+00, 5.16080669e-01, 3.70212480e-01,\n",
       "         1.42016078e-01, 9.88597111e-01, 7.50089962e-01, 1.92555867e+00,\n",
       "         6.70355310e-02, 3.21972422e+00, 4.78773892e-02, 7.37648971e-01,\n",
       "         6.63566723e-01, 7.16097770e-01, 2.03958732e+00, 2.33389712e-01,\n",
       "         6.48900923e-01, 3.33315664e-01, 4.06510437e-03, 4.05184382e-02,\n",
       "         4.10967125e+00, 2.58318489e+00, 1.48973734e+00, 1.26707880e-01,\n",
       "         3.92208384e+00, 2.36230288e+00, 4.31041363e-01, 8.33736505e-01,\n",
       "         7.76560244e-02, 7.85131027e-01, 3.42699414e-01, 7.44945264e-01,\n",
       "         5.30411060e-01, 1.87569284e+00, 1.93530693e+00, 1.91370391e+00,\n",
       "         1.54081987e-01, 5.22017487e-01, 1.05729801e+00, 3.11620462e+00,\n",
       "         9.41822340e-01, 1.21718601e+00, 1.96948013e-01, 5.25049985e-01,\n",
       "         5.22824309e-01, 5.24348704e-01, 2.52621545e-01, 2.04652672e-01,\n",
       "         1.60312786e+00, 8.07581734e-01, 2.45077902e-01, 7.70546436e-01,\n",
       "         2.40434458e+00, 7.53129555e-01, 2.50630102e-01, 4.49836908e-01,\n",
       "         3.13382904e+00, 7.16277577e-01, 2.58091430e-01, 6.18103892e-01,\n",
       "         7.44426379e-01, 1.09523967e+00, 2.25638608e-01, 1.79049819e+00,\n",
       "         1.56804134e-01, 1.85481063e+00, 1.85861905e-01, 1.11242645e+00,\n",
       "         2.70784483e+00, 2.62869267e-01, 5.79173183e-01, 5.93814168e-01,\n",
       "         6.48866337e-02, 1.87010016e+00, 7.77177729e-01, 8.13702720e-01,\n",
       "         2.49135897e+00, 1.97901725e+00, 4.34438125e-02, 2.22351461e+00,\n",
       "         3.70150643e-02, 1.90124096e+00, 6.41861143e-01, 1.95995499e+00,\n",
       "         3.03876239e+00, 1.79406052e+00, 2.02602294e+00, 1.12996326e+00,\n",
       "         8.83552156e-01, 2.47451186e-01, 3.74068884e-01, 1.07448753e+00,\n",
       "         2.37276503e+00, 4.44291594e-01, 1.40213031e+00, 7.91032851e-01,\n",
       "         1.72732711e+00, 1.91746608e+00, 8.36081804e-01, 4.59380148e-01,\n",
       "         2.55843170e+00, 2.82387144e+00, 1.62472455e+00, 1.91364373e+00,\n",
       "         1.74777233e+00, 2.59247171e-01, 1.82844417e+00, 1.09855555e+00,\n",
       "         8.57931778e-01, 1.10004523e+00, 1.04035133e+00, 4.86349111e-01,\n",
       "         2.09128550e+00, 2.43656612e-01, 6.35275537e-01, 6.73797644e-01,\n",
       "         1.67754741e+00, 2.45731912e+00, 1.58200059e+00, 5.38970559e-01,\n",
       "         1.76998663e+00, 3.21502129e+00, 1.76177988e+00, 1.41833451e+00,\n",
       "         2.59006660e+00, 1.39278958e+00, 1.87326146e-01, 8.84990468e-01,\n",
       "         4.98221555e-01, 1.36287601e+00, 8.98411685e-01, 8.20074569e-01,\n",
       "         3.81384602e-01, 9.65024334e-01, 6.02985967e-01, 5.31645689e-01,\n",
       "         6.50948763e-01, 9.24487794e-01, 2.62364111e+00, 2.01132026e+00,\n",
       "         1.17231741e+00, 2.49243781e+00, 7.96877645e-01, 1.25374188e+00,\n",
       "         1.57367868e+00, 9.83997172e-01, 1.58761862e+00, 8.49374333e-01,\n",
       "         9.90895683e-01, 6.13675599e-01, 1.39722019e+00, 9.55666026e-01,\n",
       "         3.07503289e+00, 1.40628993e+00, 9.83821752e-02, 3.82526256e-01,\n",
       "         1.75837049e+00, 9.60414789e-01, 1.83713073e+00, 1.44186875e+00,\n",
       "         5.47138591e-01, 5.38053269e-01, 1.55618063e+00, 1.93798892e+00,\n",
       "         2.74648532e+00, 2.41996282e+00, 4.43913429e-03, 4.20100833e+00,\n",
       "         1.47689293e-01, 9.83889633e-01, 2.43754854e+00, 9.48899968e-02,\n",
       "         8.18185206e-01, 3.19511199e-01, 8.66482968e-03, 1.63931775e-01,\n",
       "         2.31098323e-01, 1.21387175e+00, 2.66207137e+00, 1.02206382e+00,\n",
       "         1.92318890e+00, 4.21383789e-01, 3.32164675e+00, 2.42181266e+00,\n",
       "         2.94296477e+00, 2.18779456e-01, 1.21322863e+00, 2.90205474e-01,\n",
       "         1.00965524e-02, 1.65024751e+00, 6.54116122e-01, 1.35635308e+00,\n",
       "         2.98752811e+00, 1.59593121e+00, 4.69714202e-01, 5.17271302e-01,\n",
       "         1.83027007e-01, 7.67913868e-01, 6.51356623e-01, 1.89071080e+00,\n",
       "         4.79932783e-01, 7.59420247e-01, 2.28007115e+00, 1.34842639e+00,\n",
       "         2.75662031e+00, 3.69378162e-01, 4.09023349e-01, 1.93078597e+00,\n",
       "         1.92403836e+00, 4.00870016e-01, 1.13811899e+00, 8.98325240e-01,\n",
       "         5.94654251e-01, 1.50475545e+00, 2.45910227e+00, 5.84418057e-01,\n",
       "         8.02544998e-01, 2.08027146e+00, 9.24358692e-01, 1.07612764e+00,\n",
       "         4.20991768e-01, 6.74631458e-01, 1.82516530e+00, 2.66944076e+00,\n",
       "         9.91278112e-01, 1.98882883e+00, 9.09497241e-01, 1.49620423e+00,\n",
       "         2.47894222e+00, 1.75969315e+00, 2.17393552e+00, 2.55528573e-01,\n",
       "         1.72190612e+00, 7.80871211e-01, 1.59707936e+00, 3.28711136e-01,\n",
       "         7.99373715e-02, 3.89484131e+00, 1.73928987e+00, 9.55253111e-01,\n",
       "         1.95879647e+00, 9.67494623e-01, 2.40699330e+00, 1.10707646e+00,\n",
       "         1.25061837e+00, 7.60890170e-01, 5.66602852e-01, 4.86859704e-01,\n",
       "         2.19473745e+00, 1.21807439e+00, 1.09500105e+00, 4.20363959e-01,\n",
       "         1.88640587e+00, 3.56812295e-01, 1.31520299e+00, 6.34131535e-02,\n",
       "         3.97517286e-01, 1.34222414e+00, 7.57046810e-01, 3.20050544e+00,\n",
       "         1.51711107e+00, 1.95384202e+00, 2.40069384e+00, 8.13520167e-01,\n",
       "         8.14445985e-01, 8.77978262e-01, 3.03508958e-01, 1.74263236e-01,\n",
       "         6.12276586e-02, 2.80633942e+00, 3.10209655e-01, 1.13014116e+00,\n",
       "         4.97490405e-01, 1.85310459e-01, 1.48365127e+00, 2.32985883e+00,\n",
       "         1.52893704e+00, 4.38645428e+00, 4.88754914e-01, 1.83197465e+00,\n",
       "         2.55162932e+00, 1.69260801e+00, 7.50952652e-01, 3.25558202e+00,\n",
       "         1.28292010e+00, 4.94404764e+00, 1.62755823e+00, 1.43853128e+00,\n",
       "         7.27422937e-01, 1.01416833e+00, 1.55819126e+00, 2.03708276e+00,\n",
       "         8.76866760e-02, 2.00349153e-01, 1.00029393e+00, 2.11301762e+00,\n",
       "         1.69529741e+00, 7.62526784e-01, 6.22841327e-01, 1.56391385e-01,\n",
       "         1.01933921e+00, 3.20926947e-01, 1.00832519e+00, 2.13432425e+00,\n",
       "         1.84315365e-01, 3.47426317e+00, 1.49697028e+00, 1.27580059e+00,\n",
       "         2.63316587e+00, 1.75413143e+00]),\n",
       "  'mae': 1.23,\n",
       "  'mape': array([1.83227936e+01, 8.13134700e+00, 1.68174126e+00, 1.05082357e+01,\n",
       "         2.26001018e+01, 1.07241174e+00, 3.34123593e+00, 5.93482433e+00,\n",
       "         9.98231327e+00, 1.53137954e+01, 2.68872673e+01, 3.79458208e+01,\n",
       "         4.06335368e+01, 2.13829272e+01, 8.68343256e+00, 2.79712096e+01,\n",
       "         2.76433915e+01, 6.10338478e-01, 2.08512477e+01, 5.64769034e+00,\n",
       "         2.04731080e+01, 1.14358533e+01, 2.80220494e+00, 4.09919771e+00,\n",
       "         2.97550776e+01, 1.49195051e+02, 2.30199275e+01, 5.22504714e+01,\n",
       "         7.63607323e+00, 1.57853193e+01, 1.21678021e+01, 9.13842923e+00,\n",
       "         1.89912911e+01, 7.93124233e+00, 1.91109965e+01, 2.44140931e+01,\n",
       "         8.82737935e+00, 5.27509874e+00, 9.08418309e+00, 4.61887285e+01,\n",
       "         4.39320615e+00, 1.01212880e+01, 1.41975820e+01, 1.29750092e+01,\n",
       "         1.58884920e+01, 1.05114998e+01, 7.05438429e+00, 2.77488897e+01,\n",
       "         1.26640100e+01, 3.82219511e+01, 1.66978200e+00, 6.61293190e+01,\n",
       "         1.64621886e+02, 2.13303148e+01, 7.90938217e+01, 8.74215083e+01,\n",
       "         5.90346093e+01, 6.10908115e+00, 6.36762464e+01, 3.67287118e+00,\n",
       "         1.95208465e+01, 2.22010063e+01, 8.76285814e+00, 5.86725807e+00,\n",
       "         2.05201267e+00, 1.13050648e+01, 1.70043380e+01, 6.74717959e+01,\n",
       "         9.97367556e-01, 2.98965500e+01, 7.27797303e-01, 9.26856851e+00,\n",
       "         2.91794608e+01, 1.40496451e+01, 5.71788552e+01, 3.21559318e+00,\n",
       "         1.15687897e+01, 6.95004175e+00, 5.99117290e-02, 6.47296899e-01,\n",
       "         4.56630139e+01, 3.24577503e+01, 5.16184374e+01, 2.23961376e+00,\n",
       "         3.53781164e+01, 4.96599069e+01, 7.23392800e+00, 1.50960494e+01,\n",
       "         1.06105457e+00, 9.75832329e+00, 5.26980942e+00, 8.27716960e+00,\n",
       "         1.30139207e+01, 2.40600527e+01, 8.41061148e+01, 2.12633768e+01,\n",
       "         2.06308565e+00, 7.58809647e+00, 1.98255236e+01, 7.55348658e+01,\n",
       "         1.31633158e+01, 1.42813953e+01, 2.88491851e+00, 1.18473349e+01,\n",
       "         8.29744200e+00, 1.32057261e+01, 5.39083200e+00, 4.08225322e+00,\n",
       "         4.49429228e+01, 2.70731063e+01, 3.42531461e+00, 1.20436646e+01,\n",
       "         7.46262400e+01, 1.33574530e+01, 4.17716837e+00, 6.34808201e+00,\n",
       "         2.80937390e+01, 7.36816605e+00, 3.06092984e+00, 1.06744753e+01,\n",
       "         1.81704352e+01, 1.51656412e+01, 2.58722890e+00, 1.88020686e+01,\n",
       "         1.88897201e+00, 2.10202835e+01, 2.70554491e+00, 1.50369759e+01,\n",
       "         5.69238278e+01, 4.07947870e+00, 1.58348856e+01, 7.58973791e+00,\n",
       "         8.86579758e-01, 2.07788907e+01, 1.33446069e+01, 9.00490941e+00,\n",
       "         2.41855326e+01, 2.07496313e+01, 5.45872045e-01, 4.73605787e+01,\n",
       "         5.44669185e-01, 3.88580125e+01, 1.17882879e+01, 2.33385210e+01,\n",
       "         1.04038033e+02, 3.79960413e+01, 2.17827804e+01, 1.39269362e+01,\n",
       "         1.28057914e+01, 4.24888502e+00, 6.33308937e+00, 2.62613612e+01,\n",
       "         9.89949083e+01, 8.70754846e+00, 3.98495794e+01, 1.28258451e+01,\n",
       "         5.56776108e+01, 2.02779175e+01, 1.61995225e+01, 6.10644094e+00,\n",
       "         1.23561049e+02, 5.51625047e+01, 4.94614103e+01, 6.73072124e+01,\n",
       "         4.76285940e+01, 4.42864436e+00, 6.47486989e+01, 1.35566003e+01,\n",
       "         1.19590288e+01, 1.15153714e+01, 1.64644888e+01, 6.07936388e+00,\n",
       "         2.36200106e+01, 4.33568987e+00, 9.14974551e+00, 9.22880257e+00,\n",
       "         3.45610148e+01, 6.06654089e+01, 2.82396224e+01, 8.09559594e+00,\n",
       "         2.94128682e+01, 5.77344462e+01, 4.09618134e+01, 4.29664229e+01,\n",
       "         1.12983463e+02, 1.54754398e+01, 2.82667359e+00, 1.04343798e+01,\n",
       "         6.22776944e+00, 3.11168571e+01, 2.08882915e+01, 8.45527482e+00,\n",
       "         6.23839084e+00, 8.16163551e+00, 7.57652618e+00, 8.23499524e+00,\n",
       "         1.26277622e+01, 1.27346278e+01, 3.01603650e+01, 4.41847670e+01,\n",
       "         1.97999206e+01, 3.19712182e+01, 1.52604505e+01, 3.33045918e+01,\n",
       "         6.56262738e+01, 1.51183262e+01, 1.74418103e+01, 1.04155064e+01,\n",
       "         2.41216773e+01, 1.17190329e+01, 1.59778586e+01, 1.16131831e+01,\n",
       "         2.87413918e+01, 2.15545533e+01, 1.32985906e+00, 4.63566374e+00,\n",
       "         3.41917981e+01, 1.97482954e+01, 3.20978156e+01, 2.20550096e+01,\n",
       "         7.19724116e+00, 8.59559816e+00, 2.26001060e+01, 2.16327031e+01,\n",
       "         2.44744461e+01, 2.83937258e+01, 7.02431956e-02, 3.70854928e+01,\n",
       "         1.99036369e+00, 3.11429742e+01, 3.01046762e+01, 1.28075077e+00,\n",
       "         1.04950975e+01, 5.23490737e+00, 1.33213756e-01, 2.23988493e+00,\n",
       "         4.09874366e+00, 4.38291881e+01, 2.61821855e+01, 1.27107210e+01,\n",
       "         5.87103440e+01, 5.81690378e+00, 3.95531136e+01, 4.52121957e+01,\n",
       "         2.69482064e+01, 6.04398408e+00, 2.60704911e+01, 4.31030560e+00,\n",
       "         1.69444836e-01, 3.28645328e+01, 1.56172337e+01, 2.25222656e+01,\n",
       "         4.17185470e+01, 2.07291522e+01, 7.22907169e+00, 6.23141107e+00,\n",
       "         2.90471570e+00, 1.64874100e+01, 9.49045757e+00, 1.89071080e+01,\n",
       "         6.15623615e+00, 1.17631390e+01, 4.38996950e+01, 1.56099086e+01,\n",
       "         2.74406417e+01, 4.82369484e+00, 4.68996437e+00, 1.93078597e+01,\n",
       "         2.02043774e+01, 6.04727893e+00, 1.36194883e+01, 1.34099009e+01,\n",
       "         8.23410004e+00, 1.89887610e+01, 2.66660443e+01, 1.18764394e+01,\n",
       "         2.11425281e+01, 2.47712112e+01, 1.24180045e+01, 1.70060727e+01,\n",
       "         1.04901027e+01, 1.16929627e+01, 2.46712639e+01, 2.89916846e+01,\n",
       "         3.85431596e+01, 2.73040876e+01, 1.32698312e+01, 2.09995381e+01,\n",
       "         1.05631304e+02, 1.91539845e+01, 3.23442319e+01, 6.26154037e+00,\n",
       "         4.55858319e+01, 1.30424249e+01, 2.95868304e+01, 5.46849757e+00,\n",
       "         1.20418943e+00, 3.43543981e+01, 3.07426620e+01, 2.22098686e+01,\n",
       "         4.00895162e+01, 1.59103280e+01, 7.58054754e+01, 9.60763787e+00,\n",
       "         2.08436395e+01, 1.65336865e+01, 1.66748927e+01, 8.54294203e+00,\n",
       "         3.51914073e+01, 1.40025128e+01, 1.33855747e+01, 4.85544562e+00,\n",
       "         7.21052269e+01, 5.57698720e+00, 2.18055089e+01, 8.62914036e-01,\n",
       "         7.61257757e+00, 1.54296903e+01, 1.43935174e+01, 4.37035572e+01,\n",
       "         2.41424550e+01, 2.26477581e+01, 2.26473580e+01, 1.05666104e+01,\n",
       "         1.67793051e+01, 1.26860462e+01, 4.18617820e+00, 2.56424828e+00,\n",
       "         8.57209979e-01, 2.80633942e+01, 4.27768475e+00, 4.42699226e+01,\n",
       "         1.68150198e+01, 3.05515476e+00, 1.86420966e+01, 2.67831574e+01,\n",
       "         1.98589817e+01, 1.73867027e+02, 9.39169188e+00, 2.25949189e+01,\n",
       "         3.39182566e+01, 3.67793557e+01, 1.79061726e+01, 4.40066021e+01,\n",
       "         2.45683122e+01, 4.47201835e+01, 3.39365920e+01, 1.57547671e+01,\n",
       "         1.15925720e+01, 2.74175873e+01, 2.49847394e+01, 2.30078181e+01,\n",
       "         3.03828672e+00, 4.58722825e+00, 1.20989547e+01, 3.78729976e+01,\n",
       "         2.17685960e+01, 9.53158480e+00, 1.26099053e+01, 3.73508833e+00,\n",
       "         1.88685985e+01, 7.60157378e+00, 2.70964371e+01, 2.70414421e+01,\n",
       "         3.14860603e+00, 8.25709742e+01, 2.13852897e+01, 1.99742824e+01,\n",
       "         2.69875591e+01, 2.25769985e+01]),\n",
       "  'rmse': 1.547,\n",
       "  'accuracy': 77.499487749096})"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visaSVRPerf, viphSVRPerf, saphiSVRPerf\n",
    "visaRFPerf, viphRFPerf, saphiRFPerf\n",
    "visaLRPerf, viphLRPerf, saphiLRPerf\n",
    "visaKNNPerf, viphKNNPerf, saphiKNNPerf  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x7f196f20db00>,\n",
       "  <matplotlib.axis.XTick at 0x7f196f20d4a8>,\n",
       "  <matplotlib.axis.XTick at 0x7f196f20d358>,\n",
       "  <matplotlib.axis.XTick at 0x7f196eee86d8>,\n",
       "  <matplotlib.axis.XTick at 0x7f196eee8ba8>,\n",
       "  <matplotlib.axis.XTick at 0x7f196eef4128>,\n",
       "  <matplotlib.axis.XTick at 0x7f196eef4588>],\n",
       " <a list of 7 Text xticklabel objects>)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting\n",
    "\n",
    "rfCorrelation = (SASARFPerf['correlation'][1][0], vinaRFPerf['correlation'][1][0], phCoRFPerf['correlation'][1][0], RFPerf['correlation'][1][0],visaRFPerf['correlation'][1][0],viphRFPerf['correlation'][1][0],saphiRFPerf['correlation'][1][0])\n",
    "SVMCorrelation = (SASASVRPerf['correlation'][1][0], vinaSVRPerf['correlation'][1][0], phCoSVRPerf['correlation'][1][0], SVRPerf['correlation'][1][0],visaSVRPerf['correlation'][1][0], viphSVRPerf['correlation'][1][0], saphiSVRPerf['correlation'][1][0])\n",
    "LRCorrelation = (SASALRPerf['correlation'][1][0], vinaLRPerf['correlation'][1][0], phCoLRPerf['correlation'][1][0], LRPerf['correlation'][1][0],visaLRPerf['correlation'][1][0], viphLRPerf['correlation'][1][0], saphiLRPerf['correlation'][1][0])\n",
    "KNNCorrelation = (SASAKNNPerf['correlation'][1][0], vinaKNNPerf['correlation'][1][0], phCoKNNPerf['correlation'][1][0], KNNPerf['correlation'][1][0],visaKNNPerf['correlation'][1][0], viphKNNPerf['correlation'][1][0], saphiKNNPerf['correlation'][1][0])\n",
    "SASACorr = [SASARFPerf['correlation'][1][0], SASASVRPerf['correlation'][1][0], SASALRPerf['correlation'][1][0], SASAKNNPerf['correlation'][1][0]]\n",
    "vinaCorr = [vinaRFPerf['correlation'][1][0], vinaSVRPerf['correlation'][1][0], vinaLRPerf['correlation'][1][0], vinaKNNPerf['correlation'][1][0]]\n",
    "phCoCorr = [phCoRFPerf['correlation'][1][0], phCoSVRPerf['correlation'][1][0], phCoLRPerf['correlation'][1][0], phCoKNNPerf['correlation'][1][0]]\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "#data = [SASACorr, vinaCorr, phCoCorr]\n",
    "x = np.array([1,2.5,4,5.5,7,8.5,10])\n",
    "fig,ax = plt.subplots()\n",
    "#ax = fig.add_axes([0,0,1,1])\n",
    "plt.gcf().set_size_inches((8, 8))\n",
    "ax.bar(x+0.00, rfCorrelation, color='b', width=0.25, label='RF')\n",
    "ax.bar(x+0.25, SVMCorrelation, color='g', width=0.25, label='SVM')\n",
    "ax.bar(x+0.50, LRCorrelation, color='r', width=0.25, label='LR')\n",
    "ax.bar(x+0.75, KNNCorrelation, color='y', width=0.25, label='KNN')\n",
    "ax.legend()\n",
    "plt.xticks(x + 0.36, ('SASA', 'Vina', 'phCo', 'All', 'Vina+SASA', 'Vina+phCo','SASA+phCo'))\n",
    "#plt.savefig(\"/home/poltix/Scrivania/Spyder/phCo_revision/mlShowdown3.pdf\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting\n",
    "\n",
    "rfCorrelation = (SASARFPerf['correlation'][1][0], vinaRFPerf['correlation'][1][0], phCoRFPerf['correlation'][1][0], RFPerf['correlation'][1][0],visaRFPerf['correlation'][1][0],viphRFPerf['correlation'][1][0],saphiRFPerf['correlation'][1][0])\n",
    "SVMCorrelation = (SASASVRPerf['correlation'][1][0], vinaSVRPerf['correlation'][1][0], phCoSVRPerf['correlation'][1][0], SVRPerf['correlation'][1][0],visaSVRPerf['correlation'][1][0], viphSVRPerf['correlation'][1][0], saphiSVRPerf['correlation'][1][0])\n",
    "LRCorrelation = (SASALRPerf['correlation'][1][0], vinaLRPerf['correlation'][1][0], phCoLRPerf['correlation'][1][0], LRPerf['correlation'][1][0],visaLRPerf['correlation'][1][0], viphLRPerf['correlation'][1][0], saphiLRPerf['correlation'][1][0])\n",
    "KNNCorrelation = (SASAKNNPerf['correlation'][1][0], vinaKNNPerf['correlation'][1][0], phCoKNNPerf['correlation'][1][0], KNNPerf['correlation'][1][0],visaKNNPerf['correlation'][1][0], viphKNNPerf['correlation'][1][0], saphiKNNPerf['correlation'][1][0])\n",
    "SASACorr = [SASARFPerf['correlation'][1][0], SASASVRPerf['correlation'][1][0], SASALRPerf['correlation'][1][0], SASAKNNPerf['correlation'][1][0]]\n",
    "vinaCorr = [vinaRFPerf['correlation'][1][0], vinaSVRPerf['correlation'][1][0], vinaLRPerf['correlation'][1][0], vinaKNNPerf['correlation'][1][0]]\n",
    "phCoCorr = [phCoRFPerf['correlation'][1][0], phCoSVRPerf['correlation'][1][0], phCoLRPerf['correlation'][1][0], phCoKNNPerf['correlation'][1][0]]\n",
    "\n",
    "names = ['SASA', 'Vina', 'phCo', 'All', 'Vina+SASA', 'Vina+phCo','SASA+phCo']\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "#data = [SASACorr, vinaCorr, phCoCorr]\n",
    "x = np.array([1,2.5,4,5.5,7,8.5,10])\n",
    "plt.figure(figsize=(9,3))\n",
    "plt.plot(rfCorrelation, label='RF')\n",
    "plt.plot(LRCorrelation, label='LR')\n",
    "plt.plot(SVMCorrelation, label='SVM')\n",
    "plt.plot(KNNCorrelation, label='KNN')\n",
    "plt.plot(names,rfCorrelation,'sb')\n",
    "plt.plot(names,SVMCorrelation,'sg')\n",
    "plt.plot(names,LRCorrelation,'sy')\n",
    "plt.plot(names,KNNCorrelation,'sr')\n",
    "xbase = np.linspace(0, len(x))\n",
    "ybase = 0*xbase+0.58\n",
    "#axes2 = plt.twinx()\n",
    "plt.plot(xbase, ybase, color='violet', linestyle = '--', label='Vina')\n",
    "plt.legend()\n",
    "# multiple line plot\n",
    "plt.show\n",
    "plt.savefig(\"/home/poltix/Scrivania/Spyder/phCo_revision/mlShowdown4.tiff\", DPI=300)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "vinaff = np.array([-1*v for v in vinaff])\n",
    "vinaPerf = getPerformance(vinaff,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'correlation': array([[1.        , 0.58419157],\n",
       "        [0.58419157, 1.        ]]),\n",
       " 'errors': array([2.08911335, 2.98513804, 3.11633   , 5.28787784, 2.70739126,\n",
       "        0.99907126, 3.72559   , 1.11505927, 2.98251   , 3.37967874,\n",
       "        1.78279732, 3.4768352 , 2.23084291, 1.54752999, 0.25277355,\n",
       "        2.26048335, 4.76578846, 3.54092647, 0.61660999, 1.32232251,\n",
       "        1.11389305, 1.82515371, 0.39601   , 0.89199376, 0.99739196,\n",
       "        4.51933334, 0.98541335, 2.03148587, 0.92328874, 0.48156624,\n",
       "        3.19622359, 1.45645892, 1.28872376, 1.95807999, 1.40598125,\n",
       "        1.72527126, 0.36992126, 0.44592696, 2.11739891, 1.6848565 ,\n",
       "        0.69538075, 1.95174929, 1.31010125, 1.57485251, 3.93890727,\n",
       "        1.03654394, 0.63020123, 0.39375122, 1.45471664, 2.72688266,\n",
       "        2.58315999, 1.26047125, 2.03998126, 2.14019251, 2.00162999,\n",
       "        1.61839268, 0.19676335, 2.43753269, 3.48416359, 2.82569125,\n",
       "        1.26249901, 0.55288387, 0.81267029, 1.57510392, 1.66852875,\n",
       "        1.67431251, 3.17230173, 4.25986804, 2.6469836 , 0.03504892,\n",
       "        1.03526393, 0.31173731, 1.90810163, 0.69164999, 1.96133929,\n",
       "        1.02717908, 4.01894511, 1.50708998, 0.71079615, 1.78595269,\n",
       "        1.33985   , 0.51182731, 1.67011335, 0.15763732, 1.57268615,\n",
       "        1.21138805, 1.87238269, 1.56361125, 0.62480124, 2.81988749,\n",
       "        0.42139035, 2.89031   , 1.51070071, 1.70531002, 1.26571   ,\n",
       "        1.10378   , 1.19895892, 1.80926393, 3.97479572, 5.68800182,\n",
       "        1.40167804, 0.17390125, 2.14984627, 1.25487172, 2.21692   ,\n",
       "        1.42468378, 1.43301722, 1.32827173, 3.03054929, 2.20372334,\n",
       "        1.30197804, 2.36317999, 2.30501125, 3.91425784, 0.50108   ,\n",
       "        0.76844385, 1.88592196, 0.8517036 , 2.40684172, 1.86028501,\n",
       "        2.14979999, 2.47158125, 0.9699536 , 0.08571875, 1.57601   ,\n",
       "        1.28898874, 1.68602377, 1.22009999, 5.48283805, 1.1257525 ,\n",
       "        3.65702268, 0.81887126, 2.33170124, 1.85801   , 3.18007126,\n",
       "        0.16672783, 3.44986   , 0.016058  , 1.17223269, 3.04899632,\n",
       "        0.40082998, 0.12600003, 3.33905445, 0.14792999, 2.58777125,\n",
       "        0.97520621, 0.34478   , 1.55945073, 1.39115055, 1.36827126,\n",
       "        3.07871169, 4.46602502, 5.62886437, 4.25194709, 4.40072263,\n",
       "        3.71685891, 3.17164709, 6.65780804, 1.91338909, 1.58675125,\n",
       "        3.75175893, 2.80227359, 3.92800736, 6.5029119 , 3.93921377,\n",
       "        0.79121196, 2.39680126, 2.55737378, 0.7299548 , 0.35004803,\n",
       "        3.18122124, 3.39256   , 4.02937804, 4.06196124, 2.30663485,\n",
       "        0.2398    , 0.87352804, 2.40126001, 0.51559001, 1.58936268,\n",
       "        4.02720123, 3.77291376, 3.41744   , 2.48372   , 3.43983018,\n",
       "        1.8395    , 0.854192  , 1.79746394, 3.08951   , 0.02057395,\n",
       "        0.69763   , 2.03109   , 2.76602073, 2.42783874, 3.52301269,\n",
       "        1.03613804, 3.14208804, 1.88995269, 1.01669   , 2.75800287,\n",
       "        0.48883875, 0.65376002, 0.19594875, 1.09304845, 2.18841999,\n",
       "        0.06433169, 2.73012709, 0.63769196, 1.6557646 , 2.26547799,\n",
       "        1.26278251, 0.52632201, 4.72013   , 2.11486119, 1.05459999,\n",
       "        4.30585803, 2.1030525 , 3.33793057, 1.3258818 , 0.982728  ,\n",
       "        0.59450001, 4.27537269, 0.6068373 , 0.17054731, 1.18255875,\n",
       "        1.01315875, 1.24898551, 2.14299786, 2.8681236 , 3.69751323,\n",
       "        2.99616999, 4.26038461, 2.95477998, 4.70358622, 5.50509434,\n",
       "        0.36743876, 0.35012216, 0.97044892, 2.22970109, 0.98473861,\n",
       "        3.72933587, 3.35621486, 1.06279999, 2.88249268, 0.99880875,\n",
       "        2.45286124, 2.66406297, 1.24421173, 2.19210269, 2.97224695,\n",
       "        2.59621501, 1.45484361, 1.91564091, 1.56244   , 2.63692712,\n",
       "        0.77581   , 2.16306   , 1.29308268, 1.90929057, 1.23161   ,\n",
       "        1.62431002, 0.79179804, 5.40793997, 2.35234216, 1.33939251,\n",
       "        2.25014268, 0.6687436 , 0.59707   , 1.01255875, 0.93455786,\n",
       "        0.33231268, 1.02477   , 0.62812125, 0.59088696, 0.26249875,\n",
       "        3.72016125, 1.77322998, 0.53724999, 0.5714625 , 1.13814786,\n",
       "        1.27631173, 0.06971108, 0.11994001, 1.55349831, 1.70656479,\n",
       "        0.12231666, 0.52013804, 1.76781126, 2.15853251, 0.56491336,\n",
       "        1.5330264 , 2.48410809, 1.21425647, 4.00384722, 0.01080999,\n",
       "        0.58299462, 0.61989784, 0.75765217, 0.73207268, 2.79682   ,\n",
       "        3.98700335, 2.77395809, 1.67432646, 4.71596875, 0.40931   ,\n",
       "        2.58747001, 2.37448999, 0.98723   , 0.22679201, 2.99897   ,\n",
       "        0.86679606, 2.32537732, 0.30130537, 0.32225999, 1.36647295,\n",
       "        4.34285801, 0.91521125, 1.48263   , 0.67461731, 1.65332497,\n",
       "        1.46029334, 0.657598  , 2.37665628, 1.05726   , 1.95307804,\n",
       "        1.49674125, 2.60703368, 0.51591998, 0.7687825 , 1.68762   ,\n",
       "        3.65229803, 0.85657803, 2.86373269, 3.11027845, 3.63941731,\n",
       "        0.07758   , 0.2219    , 2.65631125, 1.58676002, 2.4036246 ,\n",
       "        2.68345875, 1.89344001, 2.41290997, 1.83271001, 0.45158875,\n",
       "        2.23782733, 0.34244002, 2.78069172, 0.11417548, 3.49059   ,\n",
       "        1.02317799, 0.84038804, 0.96930335, 0.10592729, 0.88364624,\n",
       "        5.78164062, 1.8072824 , 3.4633    , 0.06458216, 0.92916664,\n",
       "        0.57825481, 0.54539875, 0.5190136 , 0.51614003, 1.79353196,\n",
       "        2.57088169, 6.31468   , 1.24034386, 0.57119805, 0.51112892]),\n",
       " 'mae': 1.88,\n",
       " 'mape': array([2.75425973e+01, 4.35540385e+01, 8.42485879e+01, 9.37854308e+01,\n",
       "        5.61244295e+01, 1.63115307e+01, 7.45118000e+01, 1.10254437e+01,\n",
       "        2.63914882e+01, 2.85834305e+01, 2.05923349e+01, 3.41739803e+01,\n",
       "        3.14098251e+01, 1.64666937e+01, 3.87259260e+00, 2.28653692e+01,\n",
       "        8.88057476e+01, 5.46755381e+01, 6.77823553e+00, 1.58422928e+01,\n",
       "        1.81947631e+01, 2.53543002e+01, 6.94879944e+00, 1.69335694e+01,\n",
       "        1.26993662e+01, 1.97869525e+02, 2.01678659e+01, 5.67969115e+01,\n",
       "        1.35302035e+01, 5.62010363e+00, 4.48959110e+01, 1.66081354e+01,\n",
       "        1.39056810e+01, 2.33161941e+01, 1.47642461e+01, 2.96239405e+01,\n",
       "        7.66849621e+00, 1.13627799e+01, 4.09753762e+01, 5.68713822e+01,\n",
       "        1.14740196e+01, 2.92275141e+01, 1.53715815e+01, 2.23517842e+01,\n",
       "        7.77749613e+01, 1.89099074e+01, 7.86009669e+00, 6.13733717e+00,\n",
       "        2.02407000e+01, 6.12306902e+01, 5.06809024e+01, 4.99616265e+01,\n",
       "        9.60018860e+01, 4.51067529e+01, 6.46331336e+01, 6.86764344e+01,\n",
       "        6.81772315e+00, 4.09077584e+01, 8.45837806e+01, 5.11633767e+01,\n",
       "        3.13011963e+01, 1.05596346e+01, 1.37988398e+01, 2.49628030e+01,\n",
       "        2.41088347e+01, 1.91465372e+01, 7.19152281e+01, 1.49266263e+02,\n",
       "        3.93823324e+01, 3.25444590e-01, 1.57373304e+01, 3.91698324e+00,\n",
       "        8.39062219e+01, 1.35699862e+01, 5.49852090e+01, 1.41522521e+01,\n",
       "        7.16508934e+01, 3.14246807e+01, 1.04757523e+01, 2.85312487e+01,\n",
       "        1.48872222e+01, 6.43111658e+00, 5.78683497e+01, 2.78630428e+00,\n",
       "        1.41859980e+01, 2.54655820e+01, 3.14231596e+01, 2.83115261e+01,\n",
       "        8.53698363e+00, 3.50481293e+01, 6.47986765e+00, 3.21145556e+01,\n",
       "        3.70658546e+01, 2.18745031e+01, 5.50062366e+01, 1.22642222e+01,\n",
       "        1.60534985e+01, 2.62996348e+01, 7.45318784e+01, 1.37873633e+02,\n",
       "        1.95904577e+01, 2.04040513e+00, 3.14912103e+01, 2.83151815e+01,\n",
       "        3.51834542e+01, 3.58806719e+01, 3.05799534e+01, 2.64953372e+01,\n",
       "        8.49600000e+01, 7.38769014e+01, 1.81970074e+01, 3.69365763e+01,\n",
       "        7.15431241e+01, 6.94230027e+01, 8.35133333e+00, 1.08442516e+01,\n",
       "        1.69066655e+01, 8.76125927e+00, 2.85448210e+01, 3.21265839e+01,\n",
       "        5.24736931e+01, 3.42236640e+01, 1.11217314e+01, 9.00134797e-01,\n",
       "        1.89857163e+01, 1.46079111e+01, 2.45430231e+01, 1.64924288e+01,\n",
       "        1.15259237e+02, 1.74705982e+01, 9.99848359e+01, 1.04662680e+01,\n",
       "        3.18592443e+01, 2.06445556e+01, 5.46037275e+01, 1.84510749e+00,\n",
       "        3.34904374e+01, 1.68365150e-01, 1.47291183e+01, 6.49432343e+01,\n",
       "        5.89813213e+00, 2.57521842e+00, 6.13243778e+01, 1.76150331e+00,\n",
       "        8.85974606e+01, 2.06536931e+01, 3.70690133e+00, 1.92204220e+01,\n",
       "        2.01626849e+01, 2.34940367e+01, 5.21234380e+01, 1.09153334e+02,\n",
       "        2.34843697e+02, 8.33327389e+01, 1.25071788e+02, 6.02653309e+01,\n",
       "        1.02232942e+02, 7.04087982e+01, 3.70729150e+01, 2.10923412e+01,\n",
       "        1.81193529e+02, 5.47406046e+01, 1.19580137e+02, 2.28722236e+02,\n",
       "        1.07347628e+02, 1.35160449e+01, 8.48753086e+01, 3.15589814e+01,\n",
       "        1.01751103e+01, 3.66433395e+00, 5.03456669e+01, 4.24070000e+01,\n",
       "        4.55097843e+01, 7.22796072e+01, 3.32219968e+01, 3.28446814e+00,\n",
       "        1.79965199e+01, 5.92814418e+01, 9.20357885e+00, 2.38729887e+01,\n",
       "        6.69222790e+01, 6.77529220e+01, 7.94563165e+01, 7.52407584e+01,\n",
       "        1.50051711e+02, 2.04388889e+01, 1.28894019e+01, 2.11927948e+01,\n",
       "        3.86188750e+01, 4.69739364e-01, 1.62200683e+01, 2.09412958e+01,\n",
       "        4.52444022e+01, 2.05333007e+01, 4.42666983e+01, 1.60493954e+01,\n",
       "        6.09534006e+01, 2.60337068e+01, 1.16874756e+01, 6.05879216e+01,\n",
       "        8.25626952e+00, 8.38596818e+00, 3.75247846e+00, 2.90359067e+01,\n",
       "        9.12624996e+01, 9.88404806e-01, 2.99935755e+01, 7.81973791e+00,\n",
       "        4.03067852e+01, 4.32626151e+01, 1.44405015e+01, 6.39582630e+00,\n",
       "        4.41176113e+01, 3.24150001e+01, 1.42553196e+01, 5.21807579e+01,\n",
       "        4.08941954e+01, 6.86353851e+01, 2.31654225e+01, 1.50319337e+01,\n",
       "        7.82024885e+00, 6.83006455e+01, 8.81297901e+00, 1.90372576e+00,\n",
       "        1.05380029e+01, 1.18875180e+01, 1.97634782e+01, 1.89178705e+01,\n",
       "        3.86528295e+01, 1.17037069e+02, 3.70038692e+01, 5.75033305e+01,\n",
       "        3.79018145e+01, 7.70640849e+01, 8.46357424e+01, 5.02050654e+00,\n",
       "        6.20974217e+00, 3.50399359e+01, 2.19297078e+01, 1.22465325e+01,\n",
       "        1.13847678e+02, 4.63301612e+01, 1.26554844e+01, 5.38125121e+01,\n",
       "        9.14591457e+00, 6.77625521e+01, 5.72467778e+01, 1.84797782e+01,\n",
       "        3.67888429e+01, 5.91920345e+01, 6.19854721e+01, 2.41577023e+01,\n",
       "        2.67504614e+01, 2.02941433e+01, 4.05832635e+01, 9.34594869e+00,\n",
       "        3.43286733e+01, 2.77629890e+01, 2.78189251e+01, 1.23161000e+01,\n",
       "        2.08354928e+01, 1.22646591e+01, 1.04122591e+02, 2.72316283e+01,\n",
       "        1.33329170e+01, 2.93845245e+01, 7.66798196e+00, 5.97070000e+00,\n",
       "        1.06329060e+01, 1.40981661e+01, 3.97667438e+00, 1.52974262e+01,\n",
       "        8.69751323e+00, 7.45650152e+00, 2.84648726e+00, 7.56004525e+01,\n",
       "        4.67145952e+01, 6.39740211e+00, 7.67713224e+00, 1.79861798e+01,\n",
       "        3.18026200e+01, 1.20825828e+00, 1.62126225e+00, 1.68718983e+01,\n",
       "        6.63551414e+01, 1.67925196e+00, 7.58896633e+00, 2.48115995e+01,\n",
       "        9.19781841e+01, 6.14899346e+00, 2.28086624e+01, 6.08712479e+01,\n",
       "        3.21462888e+01, 6.68738662e+01, 2.00261420e-01, 9.69880325e+00,\n",
       "        9.33824075e+00, 6.68286129e+00, 1.29396849e+01, 6.50267496e+01,\n",
       "        8.15996138e+01, 4.56173938e+01, 5.27309792e+01, 4.09270014e+01,\n",
       "        6.82183333e+00, 5.62241695e+01, 6.98802800e+01, 1.73229549e+01,\n",
       "        3.63648501e+00, 3.44750010e+01, 1.05959381e+01, 2.68594462e+01,\n",
       "        1.15169764e+01, 5.03693362e+00, 2.26555432e+01, 5.90967793e+01,\n",
       "        1.75265752e+01, 1.70437420e+01, 1.28263086e+01, 2.25764910e+01,\n",
       "        2.32382896e+01, 7.62247930e+00, 2.24205955e+01, 1.37324863e+01,\n",
       "        4.02375269e+01, 2.16266500e+01, 3.59577775e+01, 7.59165820e+00,\n",
       "        1.07632407e+01, 1.68762000e+01, 5.03639372e+01, 3.35538996e+01,\n",
       "        9.67932673e+01, 5.12781742e+01, 4.57293239e+01, 8.91829672e-01,\n",
       "        2.88220378e+00, 1.05288899e+02, 3.04904580e+01, 2.96454446e+01,\n",
       "        3.56706367e+01, 4.11433143e+01, 5.75348956e+01, 2.47732478e+01,\n",
       "        8.64806262e+00, 2.02417242e+01, 7.14029576e+00, 3.04540827e+01,\n",
       "        1.81955695e+00, 9.43665396e+01, 1.64060960e+01, 9.49175727e+00,\n",
       "        3.35857355e+01, 2.42532928e+00, 1.06880543e+01, 1.03628128e+02,\n",
       "        2.32065477e+01, 4.32912500e+01, 1.30751587e+00, 2.21912447e+01,\n",
       "        1.07038539e+01, 1.29184815e+01, 1.39473054e+01, 6.53938631e+00,\n",
       "        3.06383873e+01, 6.11007846e+01, 9.02097143e+01, 1.94191621e+01,\n",
       "        5.85426131e+00, 6.57861588e+00]),\n",
       " 'rmse': 2.303,\n",
       " 'accuracy': 64.3926948521514}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vinaPerf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "phCoRFPerf['correlation'][1][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RFPerf['correlation'][1][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples in training set 4031\n",
      "Correlation Coefficient: R=0.988\n",
      "Accuracy: 92.41\n",
      "Mean absolute error: 0.4\n",
      "Standard error of the errors: 0.293\n",
      "RMSE: 0.499\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6000456683452091"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdbbind2016Refined = readCasfIndex(\"/home/poltix/PDBBindIndexData/PDBBind2016/refinedSetIndex\")\n",
    "X_train2016, y_train2016 = preparingTrainingSet(pdbbind2018Features, affinityLabels, casf2016, mask=pdbbind2016Refined)\n",
    "rf500 = RandomForestRegressor(n_estimators=500, max_features=0.33, bootstrap=True, oob_score=True, n_jobs=-1)\n",
    "\n",
    "with open('/home/poltix/Documents/casf2016WMetalIon.pickle', 'rb') as fi:\n",
    "    casf2016Features = pickle.load(fi)\n",
    "casf2016 = casf2016Features[casf2016Features['pdb'].isin(casf2016dict.keys())]\n",
    "casf2016PKD = [affinityLabels[x] for x in casf2016['pdb']]\n",
    "casf2016_pdb = casf2016['pdb']\n",
    "casf2016 = casf2016.fillna(0)\n",
    "casf2016 = casf2016.drop('pdb', axis = 1)\n",
    "casf2016 = casf2016.drop('Affinity', axis = 1)\n",
    "for feat in casf2016Features.columns:\n",
    "    if feat not in X_train2016.columns:\n",
    "        casf2016Features.drop(feat, axis = 1, inplace = True)\n",
    "        \n",
    "casf2016Features = casf2016Features.reindex(sorted(casf2016Features.columns), axis=1)\n",
    "X_test2016 = casf2016Features\n",
    "y_test2016 = casf2016PKD\n",
    "rf500.fit(X_train2016,y_train2016)\n",
    "prd500 = rf500.predict(X_test2016)\n",
    "printPerformance(prd500, y_test2016)\n",
    "rf500.oob_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
